<?php
namespace App\Chung;

use DB;
use Auth;
use Log;
use Decrypter;

class Ubi
{
    public $jrfPathFull;        //  양식지 경로
    public $dataSet;            //  데이터셋
    public $post_cd;
    public $zip;
    public $addr1;
    public $addr2;
    public $loan_info_no;
    public $cust_info_no;
    public $loan_app_no;

    public $err_msg;

    //  줄바꿈(^n)이 있는 양식지, loan_contract -> 일괄인쇄 시 각각 개별로 '바로' 인쇄
    public static $directPrint = [
        "1001064", "1001031", "1001035", "1001058", "loan_contract_kihan", "loan_contract_etc", "1001070"
    ];

    //  postCr - DM출력 (계약서실) 에서 사용 하는 양식지
    public static $postCr = [
        "1004034", "1001008", "1003003",
    ];

    //  doc - 계약서관리 에서 사용 하는 양식지
    public static $doc = [
        "loan_contract_kihan", "loan_contract_etc",
    ];

    //  대부거래계약서 코드
    public static $loanContract_cd = [
        "1001010"   =>  "대부거래계약서(기한연장)",
        "1001011"   =>  "대부거래계약서(한도외증액)",
        "1001006"   =>  "대부거래계약서",
    ];

    public static $titleArray = [
        "loan_contract_kihan" =>  "대부거래계약서(기한연장)",
        "loan_contract_etc"   =>  "대부거래계약서",
        "1001070"           =>  "개인신용정보활용동의서",
        "1001031"           =>  "채권현황",
        "1001032"           =>  "채권관리",
        "1004033"           =>  "독촉장",
        "1004034"           =>  "독촉장(서식1-1)",
        "1004001"           =>  "독촉장(내용증명)",
        "1001035"           =>  "거래내역확인서",
        "1001036"           =>  "대출잔고증명",
        "1001037"           =>  "대출잔고증명(화해/개회)",
        "1003004"           =>  "상속절차이행요청서",
        "1003005"           =>  "상속절차협조문",
        "1003001"           =>  "안내장",
        "1003002"           =>  "안내장(방문)",
        "1001008"           =>  "기한이익상실 예정통보서",
        "1004003"           =>  "기한이익상실예정통지서(계약서미회수)",
        "1004004"           =>  "법적절차착수통지서",
        "1001038"           =>  "완납확인서",
        "1003003"           =>  "채무조정안내문",
        "1003039"           =>  "채무조정안내문",
        "1003040"           =>  "채무조정안내문(화해)",
        "1004002"           =>  "담보채권법적절차예정통지",
        "1003006"           =>  "고발통지서(신용)",
        "1003007"           =>  "고발통지서(담보)",
        "1001041"           =>  "채권자 계좌번호 신고서",
        "1001042"           =>  "가압류를 본압류로 이전하는 채권압류 및 추심(전부)명령 신청",
        "1001043"           =>  "사용인감계",
        "1001044"           =>  "위임장",
        "1001045"           =>  "소송대리허가신청 및 소송위임장",
        "1001046"           =>  "신청서",
        "1004047"           =>  "고소장",
        "1004048"           =>  "대여금청구소장",
        "1004049"           =>  "지급명령신청서",
        "1004050"           =>  "채권가압류신청서",
        "1004051"           =>  "채권압류 및 추심명령 신청",
        "1001052"           =>  "대출약정서",
        "1001053"           =>  "대출약정서_신용대출(우수)",
        "1001054"           =>  "대출약정서",
        "1001055"           =>  "대부조건 변경서",
        "1004056"           =>  "강제집행신청서",
        "1001057"           =>  "채권양도통지서",
        "1001058"           =>  "고객정보출력",
        "1001060"           =>  "대부보증 표준약관",
        "1001061"           =>  "연대보증약정서",
        "1001062"           =>  "위임장 및 승낙서",
        "1001063"           =>  "영수증(겸)잔고 확인증",
        "1001071"           =>  "고객원장및대출상세내역",
        "1001064"           =>  "대출중개 경로 표시서",
        "1001065"           =>  "고객정보 적법수집 확인서",
        "1001066"           =>  "미대출확인서",
        "1001067"           =>  "개인정보 조회 동의서",
        "1001068"           =>  "대부보증표준약관+개인(신용)정보조회동의서",
        // "1001069"           =>  "인터넷 대출신청 개인(신용)정보 수집이용동의서",         //  -> -> 사용하지 않는다고 함. 20210805
        "1001059"           =>  "채무상환계획표",

    ];
    
    //  ERP 용 양식지
    public static $erpTitle = [
        "loan_contract_kihan" =>  "대부거래계약서(기한연장)",
        "1001070"           =>  "개인신용정보활용동의서",
        "1001031"           =>  "채권현황",
        "1001032"           =>  "채권관리",
        "1004033"           =>  "독촉장",
        "1004034"           =>  "독촉장(서식1-1)",
        "1004001"           =>  "독촉장(내용증명)",
        "1001035"           =>  "거래내역확인서",
        "1001036"           =>  "대출잔고증명",
        "1001037"           =>  "대출잔고증명(화해/개회)",
        "1003004"           =>  "상속절차이행요청서",
        "1003005"           =>  "상속절차협조문",
        "1003001"           =>  "안내장",
        "1003002"           =>  "안내장(방문)",
        "1001008"           =>  "기한이익상실 예정통보서",
        "1004003"           =>  "기한이익상실예정통지서(계약서미회수)",
        "1004004"           =>  "법적절차착수통지서",
        "1001038"           =>  "완납확인서",
        "1003003"           =>  "채무조정안내문",
        "1003039"           =>  "채무조정안내문",
        "1003040"           =>  "채무조정안내문(화해)",
        "1004002"           =>  "담보채권법적절차예정통지",
        "1003006"           =>  "고발통지서(신용)",
        "1003007"           =>  "고발통지서(담보)",
        "1001041"           =>  "채권자 계좌번호 신고서",
        "1001042"           =>  "가압류를 본압류로 이전하는 채권압류 및 추심(전부)명령 신청",
        "1001043"           =>  "사용인감계",
        "1001044"           =>  "위임장",
        "1001045"           =>  "소송대리허가신청 및 소송위임장",
        "1001046"           =>  "신청서",
        "1004047"           =>  "고소장",
        "1004048"           =>  "대여금청구소장",
        "1004049"           =>  "지급명령신청서",
        "1004050"           =>  "채권가압류신청서",
        "1004051"           =>  "채권압류 및 추심명령 신청",
        "1001052"           =>  "대출약정서",
        "1001053"           =>  "대출약정서_신용대출(우수)",
        "1001054"           =>  "대출약정서",
        "1001055"           =>  "대부조건 변경서",
        "1004056"           =>  "강제집행신청서",
        "1001057"           =>  "채권양도통지서",
        "1001058"           =>  "고객정보출력",
        "1001060"           =>  "대부보증 표준약관",
        "1001061"           =>  "연대보증약정서",
        "1001062"           =>  "위임장 및 승낙서",
        "1001063"           =>  "영수증(겸)잔고 확인증",
        "1001071"           =>  "고객원장및대출상세내역",
    ];

    //  UPS 용 양식지
    public static $upsTitle = [
        "loan_contract_etc" =>  "대부거래계약서",
        "1001070"           =>  "개인신용정보활용동의서",
        "1001064"           =>  "대출중개 경로 표시서",
        "1001065"           =>  "고객정보 적법수집 확인서",
        "1001066"           =>  "미대출확인서",
        "1001067"           =>  "개인정보 조회 동의서",
        "1001068"           =>  "대부보증표준약관+개인(신용)정보조회동의서",
        // "1001069"           =>  "인터넷 대출신청 개인(신용)정보 수집이용동의서",             //  -> 사용하지 않는다고 함. 20210805
    ];
    
    /*
        바코드 생성규칙 : ERP - 서식코드_고객번호_계약번호
                          UPS - 서식코드_고객번호_계약번호 (고객번호,계약번호가 있는 고객만 바코드 생성)
    */
    private $barcode_number = [
        "1001010",            //     "대부거래계약서(기한연장)(중도상환여부Y)(A,A2,V,B담보)",
        "1001011",            //     "대부거래계약서(한도외증액)(중도상환여부Y)(A,A2,V,B담보)",
        "1001006",            //     "대부거래계약서(그 외)(중도상환여부Y)",
        
        "1001008",            //      기한이익상실예정통보서
        "1003001",            //      안내장
        "1003002",            //      안내장(방문)
        "1004001",            //      독촉장(내용증명)
        "1003003",            //      채무조정안내문
        "1004002",            //      담보채권법적절차예정통지
        "1004003",            //      기한이익상실예정통보서(계약서미회수)
        "1003004",            //      상속절차이행요청서
        "1003005",            //      상속절차협조문
        "1004004",            //      법적절차착수통지서
        "1003006",            //      고소/고발통지서(신용)
        "1003007",            //      고소/고발통지서(담보)
    ];
    
    public function __construct($param)
    {
        //  contentParser 외에 추가로 파싱이 필요한 양식지
        $moreParserArray = [
            "1001064",
            "1001065",
            "1001035",
            "1003006",
            "1003007",
            "1001069",
            "1001032",
            "1001063",
            "1001059",
            "1001058",
            "1001071",      //  고객원장및대출상세내역
        ];

        //====================================================================================================
        if( is_array($param) )
        {
            if( empty($param['post_cd']) || empty($param['lno']) ) 
            {
                $this->err_msg = "파라미터 오류 #1";
                return false;
            }

            if( $param['erp_ups'] == "ERP" )    $this->loan_info_no = $param['lno'];
            else                                $this->loan_app_no  = $param['lno'];

            $this->post_cd = $param['post_cd'];
            $param['post_addr_cd'] = trim($param['post_addr_cd']);

            //  대부거래계약서
            if( strpos($param['post_cd'],"loan_contract") !== false )
            {
                $rslt = $this->getTitle($param);

                if( $rslt['rslt'] != "Y" )
                {
                    if( empty($this->cust_info_no) && !empty($this->loan_info_no) )
                    {
                        $this->cust_info_no = DB::TABLE("loan_info")->WHERE("no", $param['lno'])->VALUE("cust_info_no");
                    }
                    $this->err_msg = $rslt['msg'];
                    return false;
                }

                $param['post_cd'] = $rslt['post_cd'];
                $param['erp_ups'] = "ERP";
            }
            else if( $param['post_cd'] == "1001070" ) //  개인정보활용동의서
            {
                $param['post_cd'] = $this->getTitle070($param['lno'], $param['erp_ups'], $param['post_cd']);
            }

            //  dataSet
            $dataArray = $this->getDataArray($param['post_cd']);
            $this->jrfPathFull = $param['post_cd'].".jrf";

            $title_num = explode("_", $param['post_cd'])[0];

            if( !$dataArray )
            {
                $this->err_msg = "파라미터 오류 #2";
                return false;
            }

            //  출력 가능 여부 판단
            $rslt = $this->custAbleChk($param);

            if( $rslt['rslt'] != "Y" )
            {
                $this->err_msg = $rslt['msg'];
                return false;
            }

            if( $param['erp_ups'] == "UPS" )
            {
                if( substr($param['post_cd'],0,7) == "1001070" )  //  개인정보활용동의서
                {
                    $dataArray = $this->p1001070($dataArray, $param);
                }
                else
                {
                    $dataArray = $this->contentParserUPS($dataArray, $param, $title_num );
                    
                    if( in_array($param['post_cd'], $moreParserArray) )
                    {
                        $dataArray = $this->{"p".$param['post_cd']}($dataArray, $param);
                    }
                }
            }
            else if( $param['erp_ups'] == "ERP" )
            {
                if( $param['post_cd'] == "1001031" )
                {
                    $dataArray = $this->p1001031($dataArray, $param);
                }
                else if( substr($param['post_cd'],0,7) == "1001070" ) //  개인정보활용동의서
                {
                    $dataArray = $this->p1001070($dataArray, $param);
                }
                else
                {
                    $dataArray = $this->contentParserERP($dataArray, $param, $title_num);
                    
                    if( in_array($param['post_cd'], $moreParserArray) )
                    {
                        $dataArray = $this->{"p".$param['post_cd']}($dataArray, $param);
                    }
                }
            }
            else
            {
                return false;
            }

            if( empty($dataArray) ) return false;

            foreach( $dataArray as $key=> $str )
            {
                $dataArray[$key] = str_replace(["\r\n","\r","\n", '  '],'', $str);
            }
            
            $this->dataSet = $dataArray;
        }
        else
        {
            return false;
        }
    }

    /*
        우편물 출력 가능 고객인지 판단하는 함수
        ->  우편물주소도 함께 셋팅한다.

        rslt : Y - 가능 , N - 불가
        msg  : 사유
    */
    private function custAbleChk($_DATA)
    {
        if( $_DATA['erp_ups'] == "UPS" )
        {
            $rslt = $this->contractStatusCheck($_DATA);

            if( $rslt['rslt'] != "Y" )
            {
                return ['rslt' => $rslt['rslt'], 'msg' => $rslt['msg']];
            }

            if( $_DATA['post_addr_cd']=="P" )
            {
                $_DATA['post_addr_cd'] = DB::TABLE("loan_app_extra")->SELECT("post_send_cd")->WHERE("loan_app_no", $this->loan_app_no)->first()->post_send_cd;
            }

            $_DATA['post_addr_cd'] = trim($_DATA['post_addr_cd']);

            //  우편물 수령지 코드로 주소가져오기
            if( empty($_DATA['post_addr_cd']) )
            {
                $_DATA['post_addr_cd'] = "2";
            }

            log::info($_DATA['post_addr_cd']);
            if( $_DATA['post_addr_cd'] == "5" )     //  내방
            {
                $this->zip   = "";
                $this->addr1 = "";
                $this->addr2 = "";
            }
            else
            {
                $_DATA['post_addr_cd'] == "9" ? "4" : $_DATA['post_addr_cd'];
                $loanApp = DB::TABLE("loan_app_extra")->SELECT("zip".$_DATA['post_addr_cd'], "addr".$_DATA['post_addr_cd']."1", "addr".$_DATA['post_addr_cd']."2")->WHERE("loan_app_no", $this->loan_app_no)->first();
    
                $this->zip   = $loanApp->{"zip".$_DATA['post_addr_cd']};
                $this->addr1 = $loanApp->{"addr".$_DATA['post_addr_cd']."1"};
                $this->addr2 = $loanApp->{"addr".$_DATA['post_addr_cd']."2"};
            }
        }
        else if( $_DATA['erp_ups'] == "ERP" )
        {
            //  고객번호 검색
            $loanInfo = DB::TABLE("loan_info")
                            ->LEFTJOIN("cust_info", "loan_info.cust_info_no", "=", "cust_info.no")
                            ->SELECT("loan_info.cust_info_no", "loan_info.loan_app_no", "cust_info.ban_post", "cust_info.prhb_yn")
                            ->WHERE("loan_info.no", $this->loan_info_no)->first();

            $this->cust_info_no = $loanInfo->cust_info_no;
            $this->loan_app_no  = $loanInfo->loan_app_no;

            $rslt = $this->contractStatusCheck($_DATA);

            if( $rslt['rslt'] != "Y" )
            {
                return ['rslt' => $rslt['rslt'], 'msg' => $rslt['msg']];
            }

            //  불거주지역 여부 체크
            $nliveChk = Func::getNliveInfo($this->cust_info_no, $_DATA['post_addr_cd']);
            log::info(print_r($nliveChk,true));
            if( $nliveChk['rslt'] == "Y" )
            {
                return ['rslt' => "N", 'msg' => $nliveChk['msg']];
            }
            else
            {
                $this->zip   = $nliveChk['addr']['zip'];
                $this->addr1 = $nliveChk['addr']['addr1'];
                $this->addr2 = $nliveChk['addr']['addr2'];
            }




            // 전산실은 모두 출력 가능
            if( Auth::user()->branch_code=="012" )
            {
                return ['rslt' => "Y"];
            }
            // 완납확인서 1001038, 거래명세서 1001035, 대출잔고증명서 1001036 3가지를 출력한다면 출력 가능
            else if( $_DATA['post_cd']=="1001038" || $_DATA['post_cd']=="1001035" || $_DATA['post_cd']=="1001036" )
            {
                return ['rslt' => "Y"];
            }

            //  우편 금지 체크
            if( Func::getBanInfo($this->cust_info_no)['ban_post']=="Y" || $loanInfo->ban_post == "Y" )
            {
                return ['rslt' => "N", 'msg' => "우편 금지 대상 고객입니다."];
            }

        }
        else
        {
            return ['rslt' => "N", 'msg' => "파라미터 오류 #4"];
        }

        return ['rslt' => "Y"];
    }

    /*
        대출 상태가 출력가능한 건인지 확인하는 함수
    */
    private function contractStatusCheck($_DATA)
    {
        if( $_DATA['erp_ups'] == "ERP" )
        {
            if( $_DATA['post_cd'] == "1001037" )          //  대출잔고증명(화해)
            {
                $loan = DB::TABLE("loan_info")->SELECT("status")->WHERE("no", $this->loan_info_no)->first();
    
                if( !in_array($loan->status, ['C', 'D']) )
                {
                    return ["rslt" => "N", "msg" => "화해 계약이 아닙니다."];
                }
            }
            elseif( $_DATA['post_cd'] == "1001038" )      //  완납확인서
            {
                $loan = DB::TABLE("loan_info")->SELECT("status")->WHERE("no", $this->loan_info_no)->first();
    
                if( $loan->status!="E" )
                {
                    return ["rslt" => "N", "msg" => "완제 계약이 아닙니다."];
                }
            }
        }

        return ["rslt" => "Y"];
    }



    /*
        대부거래계약서
    */
    private function getTitle($_DATA)
    {
        $array_pro = ["12404", "19350", "193540", "19331"]; 

        if( $_DATA['post_cd'] == "loan_contract_etc" )
        {
            if( $_DATA['erp_ups'] == "UPS" )
            {
                $loanApp = DB::TABLE("loan_app")
                                ->JOIN("loan_info", "loan_app.loan_info_no", "=", "loan_info.no")
                                ->SELECT("loan_info.cust_info_no", "loan_app.loan_info_no", "loan_app.app_type_cd", "loan_info.return_fee_rate", "loan_info.pro_cd")
                                ->WHERE("loan_app.no", $this->loan_app_no)->first();
    
                if( empty($loanApp->cust_info_no) || empty($loanApp->loan_info_no) )
                {
                    return ['rslt' => 'N', 'msg' => '대출 실행건이 아닙니다.'];
                }
    
                $this->cust_info_no = $loanApp->cust_info_no;
                $this->loan_info_no = $loanApp->loan_info_no;
    
                if( $loanApp->app_type_cd == "04" )             //  증액
                {
                    $num = "1001011";
                }
                else                                            //  그 외
                {
                    $num = "1001006";
                }

    
                if     ( (!empty($loanApp->return_fee_rate) && $loanApp->return_fee_rate != "0") && ((!empty($loanApp->pro_cd) && in_array($loanApp->pro_cd, $array_pro)) && $num != "1001006") )    $div = "01";
                elseif ( (!empty($loanApp->return_fee_rate) && $loanApp->return_fee_rate != "0") && (!in_array($loanApp->pro_cd, $array_pro) || $num == "1001006") )                                 $div = "02";
                elseif ( ( empty($loanApp->return_fee_rate) || $loanApp->return_fee_rate == "0") && (!empty($loanApp->pro_cd) && in_array($loanApp->pro_cd, $array_pro)) )                           $div = "03";
                elseif ( ( empty($loanApp->return_fee_rate) || $loanApp->return_fee_rate == "0") && !in_array($loanApp->pro_cd, $array_pro) )                                                        $div = "04";
                else   return ['rslt' => 'N', 'msg' => '해당하는 계약서 없음.'];
    
                $post_cd = $num."_".$div;
            }
            elseif( $_DATA['erp_ups'] == "ERP" )
            {
                $loanInfo = DB::TABLE("loan_info")
                                ->LEFTJOIN("loan_app", "loan_info.loan_app_no", "=", "loan_app.no")
                                ->SELECT("loan_info.cust_info_no", "loan_info.return_fee_rate", "loan_info.pro_cd", "loan_app.app_type_cd")->WHERE("loan_info.no", $this->loan_info_no)->first();
                
                $this->cust_info_no = $loanInfo->cust_info_no;

                if( $loanInfo->app_type_cd == "04" )            //  증액
                {
                    $num = "1001011";
                }
                else                                            //  그 외
                {
                    $num = "1001006";
                }

                if     ( (!empty($loanInfo->return_fee_rate) && $loanInfo->return_fee_rate != "0") && ((!empty($loanInfo->pro_cd) && in_array($loanInfo->pro_cd, $array_pro)) && $num != "1001006") )   $div = "01";
                elseif ( (!empty($loanInfo->return_fee_rate) && $loanInfo->return_fee_rate != "0") && (!in_array($loanInfo->pro_cd, $array_pro) || $num == "1001006") )                                 $div = "02";
                elseif ( ( empty($loanInfo->return_fee_rate) || $loanInfo->return_fee_rate == "0") && (!empty($loanInfo->pro_cd) && in_array($loanInfo->pro_cd, $array_pro)) )                          $div = "03";
                elseif ( ( empty($loanInfo->return_fee_rate) || $loanInfo->return_fee_rate == "0") && !in_array($loanInfo->pro_cd, $array_pro) )                                                        $div = "04";
                else   return ['rslt' => 'N', 'msg' => '해당하는 계약서 없음.'];

                $post_cd = $num."_".$div;
            }
            else
            {
                return ['rslt' => 'N', 'msg' => '파라미터 오류 #5'];
            }
        }
        elseif( $_DATA['post_cd'] == "loan_contract_kihan" )
        {
            $num = "1001010";       //  기한연장

            $loanInfo = DB::TABLE("loan_info")->SELECT("loan_info.return_fee_rate", "loan_info.pro_cd")->WHERE("no", $this->loan_info_no)->first();
    
            if     ( (!empty($loanInfo->return_fee_rate) && $loanInfo->return_fee_rate != "0") && (!empty($loanInfo->pro_cd) && in_array($loanInfo->pro_cd, $array_pro)) )  $div = "01";
            elseif ( (!empty($loanInfo->return_fee_rate) && $loanInfo->return_fee_rate != "0") && !in_array($loanInfo->pro_cd, $array_pro) )                                $div = "02";
            elseif ( ( empty($loanInfo->return_fee_rate) || $loanInfo->return_fee_rate == "0") && (!empty($loanInfo->pro_cd) && in_array($loanInfo->pro_cd, $array_pro)) )  $div = "03";
            elseif ( ( empty($loanInfo->return_fee_rate) || $loanInfo->return_fee_rate == "0") && !in_array($loanInfo->pro_cd, $array_pro) )                                $div = "04";
            else   return ['rslt' => 'N', 'msg' => '해당하는 계약서 없음.'];

            $post_cd = $num."_".$div;
        }
        else
        {
            return ['rslt' => 'N', 'msg' => '파라미터 오류 #3'];
        }


        return ['rslt' => 'Y', 'post_cd'=>$post_cd];
    }

    private function getDataArray($title)
    {
        $dataArray = [
            "1001064"       => ['1001064_01'    => '[고객명]^t[고객생년]^t[고객생월]^t[고객생일]^t[성별]',
                                '1001064_02'    => '[step_nm]^t[rcv_date]^t[company_nm]^t[company_no]^t[associ_no]^t[tel_no]^n'],

            "1001065"       => ['1001065_01'    => '[고객명]^t[고객생년]^t[고객생월]^t[고객생일]^t[성별]^t[param1]^t[param2]^t[param3]^t[param4]^t[param5]^t[param6]^t[param30]^t[param7]^t[param16]^t[param8]
                                                    ^t[param9]^t[param10]^t[param11]^t[param12]^t[param13]^t[param14]^t[param40]^t[param15]
                                                    ^t[info_get_date_1]^t[info_get_date_2]^t[info_get_date_3]^t[info_get_co_nm]^t[co_chief_nm]^t[co_manage_nm]'],

            "1001042"       => ['1001042_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[직장전화]^t[휴대폰]^t[잔액-한글]^t[오늘년월일]'],

            "1001031"       => ['1001031_01'    => '[계약번호]^t[고객명]^t[빈칸]^t[빈칸]^t[계약일]^t[대출액]^t[잔액]^t[계좌상태]^t[최종입금일]^t[약정일]^t[상환일]^t[연체일수]^t[입금약속일]^t[빈칸]^t[집중고객여부]^t[상품구분]^t[연체사유]^n'],

            "1001032"       => ['1001032_01'    => '[주민번호앞]^t[주민번호뒤한자리]^t[고객명]^t[계약번호]^t[관리지점]^t[관리담당자]^t[실거주우편번호앞]^t[실거주우편번호뒤]^t[실거주도로명주소]^t[실거주지번주소]^t[집전화1]^t[집전화2]^t[집전화3]^t
                                                    [직장우편번호앞]^t[직장우편번호뒤]^t[직장도로명주소]^t[직장지번주소]^t[직장전화1]^t[직장전화2]^t[직장전화3]^t[직장명]^t[직장-부서]^t[빈칸]^t[휴대폰1]^t[휴대폰2]^t[휴대폰3]^t
                                                    [고객메모]^t[빈칸]^t[연체사유]^t[빈칸]^t[빈칸]^t[(법조치)구분]^t[(법조치)관할법원]^t[(법조치)사건번호연도]^t[(법조치)사건번호]',
                                '1001032_02'    => '[상품구분]^t[대출액]^t[대출액]^t[한도금액]^t[계약일]^t[만기일]^t[최종입금일]^t[잔액]^t[정상이자금액]^t[연체이자금액]^t[총부족금액]^t[총납입금액]^t[연체건수]^t[최장연체일수]^t[연체일수]^t[빈칸]^t[가상계좌번호]^t
                                                    [빈칸]^t[화해일자]^t[화해금액]^t[약정일]^t[계좌상태]^t[대손상각일자]^t[대손상각금액]^t[미수금]',
                                '1001032_03'    => '[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_04'    => '[(회생1)등록일시]^t[(회생1)구분]^t[(회생1)계약번호]^t[(회생1)관할법원]^t[(회생1)확정일]^t[(회생1)접수일]^t[(회생1)사건번호]^t[(회생1)청구원금]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_05'    => '[(보전1)등록일시]^t[(보전1)구분]^t[(보전1)계약번호]^t[(보전1)관할법원]^t[(보전1)확정일]^t[(보전1)접수일]^t[(보전1)사건번호]^t[(보전1)청구원금]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_06'    => '[(메모1)등록일시]^t[(메모1)구분]^t[빈칸]^t[(메모1)관계]^t[(메모1)전화종류]^t[빈칸]^t[(메모1)약속일시]^t[(메모1)약속시분]^t[(메모1)약속금액]^t[빈칸]^t[빈칸]^t[(메모1)내용]^t[(메모1)작업자]',
                                '1001032_07'    => '[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_08'    => '[(회생2)등록일시]^t[(회생2)구분]^t[(회생2)계약번호]^t[(회생2)관할법원]^t[(회생2)확정일]^t[(회생2)접수일]^t[(회생2)사건번호]^t[(회생2)청구원금]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_09'    => '[(회생3)등록일시]^t[(회생3)구분]^t[(회생3)계약번호]^t[(회생3)관할법원]^t[(회생3)확정일]^t[(회생3)접수일]^t[(회생3)사건번호]^t[(회생3)청구원금]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_10'    => '[(메모2)등록일시]^t[(메모2)구분]^t[빈칸]^t[(메모2)관계]^t[(메모2)전화종류]^t[빈칸]^t[(메모2)약속일시]^t[(메모2)약속시분]^t[(메모2)약속금액]^t[빈칸]^t[빈칸]^t[(메모2)내용]^t[(메모2)작업자]',
                                '1001032_11'    => '[(메모3)등록일시]^t[(메모3)구분]^t[빈칸]^t[(메모3)관계]^t[(메모3)전화종류]^t[빈칸]^t[(메모3)약속일시]^t[(메모3)약속시분]^t[(메모3)약속금액]^t[빈칸]^t[빈칸]^t[(메모3)내용]^t[(메모3)작업자]',
                                '1001032_12'    => '[(보전2)등록일시]^t[(보전2)구분]^t[(보전2)계약번호]^t[(보전2)관할법원]^t[(보전2)확정일]^t[(보전2)접수일]^t[(보전2)사건번호]^t[(보전2)청구원금]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_13'    => '[(보전3)등록일시]^t[(보전3)구분]^t[(보전3)계약번호]^t[(보전3)관할법원]^t[(보전3)확정일]^t[(보전3)접수일]^t[(보전3)사건번호]^t[(보전3)청구원금]^t[빈칸]^t[빈칸]^t[빈칸]',
                                '1001032_16'    => '[빈칸]',
                                '1001032_17'    => '[빈칸]',
                                ],

            "1004033"       => ['1004033_01'    => '[오늘년월일]^t[주민번호앞]^t[주민번호뒤별]^t[고객명]^t[빈칸]^t[빈칸]^t[빈칸]^t[계약일]^t[대출액-한글]^t[대출액]^t[연체개월]^t[이자합계-한글]^t[이자합계]^t[잔액-한글]^t[잔액]^t[상품구분]^t
                                                    [가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t[지점대표번호]^t[소비자등록번호]^t[지점주소]^t[지점우편번호]^t[실거주도로명주소]^t[오늘년월일]'],

            "1004034"       => ['1004034_01'    => '[실거주도로명주소]^t[고객명]^t[실거주우편번호]^t[주민번호앞]^t[주민번호뒤별]^t[오늘년월일]^t[계약일]^t[연체개월]^t[오늘년월일]^t[이자합계-한글]^t[이자합계]^t[잔액-한글]^t[잔액]^t[상품구분]^t
                                                    [가상계좌번호]^t[관리지점]^t[소비자등록번호]^t[지점대표번호]^t[지점주소]'],

            "1004001"       => ['1004001_01'    => '[오늘년월일]^t[주민번호앞]^t[주민번호뒤한자리]^t[고객명]^t[빈칸]^t[빈칸]^t[빈칸]^t[계약일]^t[대출액-한글]^t[대출액]^t[연체개월]^t[오늘년월일]^t[이자합계-한글]^t[이자합계]^t[잔액-한글]^t[잔액]^t[상품구분]^t
                                                    [가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t[지점대표번호]^t[소비자등록번호]^t[지점주소]^t[지점우편번호]^t[실거주도로명주소]^t[오늘년월일]^t[바코드]'],

            "1001035"       => ['1001035_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[실거주지번주소]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[가상모계좌은행명-은행제거]^t[가상계좌번호]^t[상품구분]^t
                                                    [지점우편번호]^t[지점주소]^t[관리지점]^t[지점대표번호]',
                                '1001035_02'    => '[(거래)거래일]^t[(거래)거래구분]^t[(거래)거래금액]^t[(거래)정상이자일수]^t[(거래)발생이자]^t[(거래)부족금]^t[(거래)원금상환액]^t[(거래)거래후잔액]^n',     //  loan_trade
                                '1001035_03'    => '[지점우편번호]^t[지점주소]^t[관리지점]^t[지점대표번호]',],
                                
            "1001036"       => ['1001036_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤한자리]^t[실거주도로명주소]^t[상품구분]^t[금리]^t[연체금리]^t[소멸시효완성여부]^t[계약일]^t[대출액-한글]^t[대출액]^t[만기일]^t[오늘년월일]^t
                                                    [잔액-한글]^t[잔액]^t[이자합계-한글]^t[이자합계]^t[원리금합계-한글]^t[원리금합계]^t[가상모계좌은행명]^t[가상계좌번호]^t[부채증명확인서문구]^t[지점우편번호]^t[지점주소]^t[관리지점]^t[지점대표번호]'],
            
            "1001037"       => ['1001037_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤한자리]^t[실거주도로명주소]^t[상품구분]^t[금리]^t[연체금리]^t[소멸시효완성여부]^t[계약일]^t[대출액-한글]^t[대출액]^t[만기일]^t[오늘년월일]^t[잔액-한글]^t[잔액]^t
                                                    [이자합계-한글]^t[이자합계]^t[원리금합계-한글]^t[원리금합계]^t[가상모계좌은행명]^t[가상계좌번호]^t[부채증명확인서문구]^t[지점우편번호]^t[지점주소]^t[관리지점]^t[지점대표번호]'],
                                                    
            "1003004"       => ['1003004_01'    => '[주민번호앞]^t[고객명]^t[실거주도로명주소]^t[지점주소]^t[오늘년월일]^t[계약일]^t[잔액]^t[잔액-한글]^t[이자합계]^t[이자합계-한글]^t[가상계좌번호]^t[관리지점]^t[소비자등록번호]^t[지점대표번호]^t[지점주소]^t[바코드]'], 
            
            "1003005"       => ['1003005_01'    => '[주민번호앞]^t[고객명]^t[실거주도로명주소]^t[계약일]^t[대출액]^t[상환일]^t[지점주소]^t[관리지점]^t[지점대표번호]^t[지점팩스번호]^t[잔액]^t[바코드]'],

            "1003001"       => ['1003001_01'    => '[오늘년월일]^t[계약일]^t[대출액-한글]^t[이자합계-한글]^t[이자합계]^t[잔액-한글]^t[잔액]^t[가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t[지점대표번호]^t
                                                    [소비자등록번호]^t[지점주소]^t[지점우편번호]^t[바코드]'],

            "1003002"       => ['1003002_01'    => '[오늘년월일]^t[계약일]^t[대출액-한글]^t[이자합계-한글]^t[이자합계]^t[잔액-한글]^t[잔액]^t[가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t[지점대표번호]^t[소비자등록번호]^t[지점주소]^t
                                                    [지점우편번호]^t[주민번호앞]^t[고객명]^t[바코드]'],

            "1001008"       => ['1001008_01'    => '[오늘년월일]^t[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[지점주소]^t[계약일]^t[대출액-한글]^t[대출액]^t[상실일]^t[오늘년월일]^t[이자합계-한글]^t[이자합계]^t[잔액-한글]^t[잔액]^t
                                                    [가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t[지점대표번호]^t[소비자등록번호]^t[빈칸]^t[지점우편번호]^t[빈칸]^t[빈칸]^t[바코드]'],

            "1004003"       => ['1004003_01'    => '[오늘년월일]^t[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[지점주소]^t[계약일]^t[대출액-한글]^t[대출액]^t[상실일]^t[가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t
                                                    [지점장명]^t[지점대표번호]^t[소비자등록번호]^t[바코드]'],

            "1004004"       => ['1004004_01'    => '[오늘년월일]^t[주민번호앞]^t[주민번호뒤별]^t[고객명]^t[실거주도로명주소]^t[빈칸]^t[계약일]^t[대출액-한글]^t[대출액]^t[이자합계-한글]^t[이자합계]^t[가상모계좌은행명-은행제거]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t
                                                    [지점대표번호]^t[소비자등록번호]^t[지점주소]^t[지점우편번호]^t[바코드]'],

            "1001038"       => ['1001038_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[실거주지번주소]^t[상품구분]^t[계약일]^t[대출액-한글]^t[대출액]^t[완제일]^t[지점우편번호]^t[지점주소]^t[관리지점]^t[지점대표번호]^t[오늘년월일]'],

            "1001071"       => ['1001071_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤]^t[빈칸]^t[빈칸]^t[실거주우편번호앞]^t[실거주우편번호뒤]^t[실거주도로명주소]^t[집전화1]^t[집전화2]^t[집전화3]^t[휴대폰1]^t[휴대폰2]^t[휴대폰3]^t[대출일]^t[만기일]
                                                    ^t[약정일]^t[CMS은행명]^t[CMS계좌번호]^t[오늘년월일]^t[대출액]^t[잔액]^t[가상계좌번호]^t[계약번호]',        //^t[상품구분]^t[금리]^t[연체금리]
                                '1001071_03'    => '[(거래)거래일자]^t[(거래)기산일자]^t[(거래)지급금액]^t[(거래)영수금액]^t[(거래)실수령이자]^t[(거래)실수령원금]^t[(거래)대출잔액]^n'],


            "1004047"       => ['1004047_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[대출액]^t[계약일]^t[잔액]^t[잔액-한글]^t[오늘년월일]'],

            "1001043"       => ['1001043_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[오늘년월일]'],

            "1001044"       => ['1001044_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[오늘년월일]'],

            "1001045"       => ['1001045_01'    => '[고객명]^t[오늘년월일]'],

            "1004048"       => ['1004048_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[집전화]^t[휴대폰]^t[잔액]^t[잔액-한글]^t[이수일자]^t[금리]^t[계약일]^t[대출액]^t[대출액-한글]^t[이자합계-한글]^t[이자합계]^t[오늘년월일]'],

            "1001046"       => ['1001046_01'    => '[고객명]^t[실거주도로명주소]^t[오늘년월일]'],

            "1004049"       => ['1004049_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[집전화]^t[휴대폰]^t[잔액]^t[잔액-한글]^t[이수일자]^t[금리]^t[계약일]^t[대출액]^t[대출액-한글]'],

            "1004050"       => ['1004050_01'    => '[고객명]^t[잔액]^t[잔액-한글]^t[계약일]^t[대출액]^t[대출액-한글]^t[금리]^t[이수일자]^t[오늘년월일]^t[주민번호앞]^t[주민번호뒤]^t[실거주도로명주소]^t[집전화]^t[휴대폰]'],

            "1004051"       => ['1004051_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤]^t[실거주도로명주소]^t[집전화]^t[휴대폰]^t[오늘년월일]^t[잔액-한글]'],

            "1001052"       => ['1001052_01'    => '[고객명]^t[주민등록번호2]^t[실거주도로명주소(풀)]^t[대출액]^t[계약일]^t[만기일]^t[금리-%]^t[연체금리-%]^t[약정일-문구]^t[가상모계좌은행명-은행제거]^t[가상계좌번호]^t[상환방법]^t[해당사항없음]^t[지점대표번호]
                                                    ^t[지점우편-주소]^t[대부업등록번호]'],

            "1001053"       => ['1001053_01'    => '[고객명]^t[주민등록번호]^t[실거주도로명주소(풀)]^t[대출액]^t[계약일]^t[만기일]^t[금리-%]^t[연체금리-%]^t[약정일-문구]^t[가상모계좌은행명]^t[가상계좌번호]^t[상환방법]^t[해당사항없음]^t[지점대표번호]^t[지점주소]
                                                    ^t[대부업등록번호]^t[중도상환수수료]'],

            "1001054"       => ['1001054_01'    => '[고객명]^t[주민등록번호]^t[실거주도로명주소(풀)]^t[대출액]^t[계약일]^t[만기일]^t[금리-%]^t[연체금리-%]^t[약정일-문구]^t[가상모계좌은행명]^t[가상계좌번호]^t[상환방법]^t[관리지점]^t
                                                    [지점대표번호]^t[지점주소]^t[대부업등록번호]'],

            "1001055"       => ['1001055_01'    => '[금리]^t[연체금리]^t[계약일]^t[고객명]^t[고객생년월일]'],

            "1001069"       => ['1001069_01'    => '[고객명]^t[빈칸]^t[주민번호앞]^t[주민번호뒤]^t[빈칸]^t[생년월일]^t[오늘년월일]^t[ally]^t[alln]^t[c1y]^t[c1n]^t[c2y]^t[c2n]^t[c3y]^t[c3n]^t[c4y]^t[c4n]^t[c5y]^t[c5n]^t[c6y]^t[c6n]^t[f1]^t
                                                    [f2]^t[f3]^t[f4]^t[fally]^t[falln]'],

            "1001062"       => ['1001062_01'    => '[번호]^t[오늘년월일]^t[고객명]^t[주민등록번호]^t[대출일]^t[대출액]^t[금리]^t[만기일]^t[고객번호]^t[차입기관]^t[담보제공일]^t[실거주도로명주소]^t[실거주지번주소]^t[가상계좌번호]'],

            "1004056"       => ['1004056_01'    => '[사업자등록번호1]^t[사업자등록번호2]^t[사업자등록번호3]^t[지점대표번호]^t[지점우편번호]^t[지점주소]^t[고객명]^t[주민번호앞]^t[주민번호뒤]^t[집전화]^t[실거주우편번호]^t[실거주도로명주소]^t[오늘년월일]'],

            "1001060"       => ['1001060_01'    => '[거래일]^t[관리지점]^t[지점대표번호]^t[대부업등록번호]^t[지점팩스번호]^t[사업자등록번호]^t[지점주소]^t[보증인]^t[보증인휴대폰]^t[보증인생년]^t[보증인생월]^t[보증인생일]^t[보증인집전화]^t[보증인실거주도로명주소]^t
                                                    [고객명]^t[실거주도로명주소]^t[대출액-한글]^t[대출액]^t[만기일]^t[금리]^t[월금리]^t[연체금리]^t[보증최고금액-한글]^t[보증최고금액]^t[월연체금리]^t[보증인주민번호앞]^t[보증인주민번호뒤]'],

            "1001010_01"    => ['1001010_01_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t[한도금액-한글]^t[한도금액]^t
                                                    [잔액-한글]^t[잔액]^t[금리]^t[연체금리]^t[계약기간]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[bk_nm]^t[bk_usr_nm]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001010_03"    => ['1001010_03_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t[한도금액-한글]^t[한도금액]^t
                                                    [잔액-한글]^t[잔액]^t[금리]^t[연체금리]^t[계약기간]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[bk_nm]^t[bk_usr_nm]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001010_02"    => ['1001010_02_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t[한도금액-한글]^t
                                                    [한도금액]^t[잔액-한글]^t[잔액]^t[금리]^t[연체금리]^t[조기상환조건]^t[중도상환수수료-문구]^t[중도상환수수료]^t[계약일-숫자]^t[약정일]^t[해당사항없음]^t[조기상환안내문구]^t
                                                    [만기일-숫자]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001010_04"    => ['1001010_04_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t[한도금액-한글]^t[한도금액]^t
                                                    [잔액-한글]^t[잔액]^t[금리]^t[연체금리]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001011_02"    => ['1001011_02_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[조기상환조건]^t[중도상환수수료-문구]^t[중도상환수수료]^t[계약일-숫자]^t[약정일]^t[해당사항없음]^t[조기상환안내문구]^t[만기일-숫자]^t
                                                    [월금리]^t[월연체금리]^t[계약번호]^t[바코드]'],

            "1001006_02"    => ['1001006_02_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[조기상환조건]^t[중도상환수수료-문구]^t[중도상환수수료]^t[계약일-숫자]^t[약정일]^t[해당사항없음]^t[조기상환안내문구]^t
                                                    [만기일-숫자]^t[월금리]^t[월연체금리]^t[계약번호]^t[바코드]'],

            "1001011_04"    => ['1001011_04_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001006_04"    => ['1001006_04_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001011_01"    => ['1001011_01_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[계약기간]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[bk_nm]^t[bk_usr_nm]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001011_03"    => ['1001011_03_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[계약기간]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[bk_nm]^t[bk_usr_nm]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001006_03"    => ['1001006_03_01' => '[상호]^t[지점대표번호]^t[대부업등록번호]^t[사업자등록번호(대표)]^t[지점주소]^t[가상계좌번호]^t[빈칸]^t[고객명]^t[집전화]^t[고객생년]^t[고객생월]^t[고객생일]^t[휴대폰]^t[실거주도로명주소]^t
                                                    [한도금액-한글]^t[한도금액]^t[대출액-한글]^t[대출액]^t[금리]^t[연체금리]^t[계약기간]^t[계약일-숫자]^t[만기일-숫자]^t[약정일]^t[해당사항없음]^t[bk_nm]^t[bk_usr_nm]^t[월금리]^t[월연체금리]^t[계약기간]^t[계약번호]^t[바코드]'],

            "1001057"       => ['1001057_01'    => '[고객명]^t[실거주도로명주소]^t[빈칸]^t[차입기관]^t[계약번호]^t[대출액]^t[계약일]^t[만기일]^t[금리]^t[약정일]^t[양수인예금계좌]^t[양수인담당자]^t[주민번호]^t[빈칸]^t[잔액]^t[오늘년월일]^t[빈칸]'],

            //  UPS
            "1001066"       => ['1001066_01'    => '[고객명]^t[주민번호앞]^t[주민번호뒤별]^t[실거주도로명주소]^t[실거주지번주소]^t[빈칸]^t[오늘년월일]'],

            //  UPS
            "1001068"       => ['1001068_01'    => '[계약일]^t[관리지점]^t[지점대표번호]^t[대부업등록번호]^t[지점팩스번호]^t[사업자등록번호]^t[지점주소]^t[보증인]^t[보증인휴대폰]^t[보증인생년]^t[보증인생월]^t[보증인생일]^t[보증인집전화]^t[보증인실거주도로명주소]^t
                                                    [고객명]^t[실거주도로명주소]^t[대출액-한글]^t[대출액]^t[만기일]^t[금리]^t[월금리]^t[연체금리]^t[보증최고금액-한글]^t[보증최고금액]^t[월연체금리]^t[보증인주민번호앞]^t[보증인주민번호뒤]'],
                                                       
            // "PPRTCL02RPT"   => ['PPRTCL02RPT_01' => '[빈칸]^t[빈칸]^t[빈칸]'],
            
            "1001059"       => ['1001059_01'    => '[고객명]^t[고객생년월일]^t[대출액]^t[계약기간]^t[금리]^t[연체금리]^t[상환방법]^t[상품구분]',
                                '1001059_02'    => '[(스케줄)순번]^t[(스케줄)상환일자]^t[(스케줄)구분]^t[(스케줄)기간]^t[(스케줄)무이자기간]^t[(스케줄)기산일]^t[(스케줄)기종일]^t[(스케줄)금리]^t[(스케줄)납입액]^t[(스케줄)납입원금]^t
                                                    [(스케줄)납입이자]^t[(스케줄)잔액]^n'],

            "1001063"       => ['1001063_01'    => '[(거래)거래구분]^t[관리지점]^t[지점회계담당]^t[고객명]^t[주민등록번호3]^t[한도금액]^t[전번거래일]^t[전번거래잔액]^t[전번거래총부족금액]^t[이번거래일]^t[이번거래구분]^t[상환방법]^t[이번거래금액1]^t[이번거래후잔액1]^t
                                                    [이번거래후미수금1]^t[이번거래금액2]^t[이번거래후잔액2]^t[이번거래후부족금2]^t[이번거래투자원금상환]^t[이번거래상환정상이자]^t[이번거래상환연체이자]^t[이번거래상환가수금]^t[이번거래상환비용]^t[증명발급수수료]^t
                                                    [상환일]^t[상환일이자금액]^t[잔액]^t[빈칸]^t[상환계좌-문구]^t[가상모계좌은행명]^t[가상계좌번호]^t[지점대표번호]^t[오늘년월일-한글]'],

            "1003003"       => ['1003003_01'    => '[주민번호앞]^t[주민번호뒤별]^t[고객명]^t[오늘년월일]^t[실거주도로명주소]^t[실거주우편번호]^t[계약번호]^t[계약일]^t[만기일]^t[빈칸]^t[잔액]^t[대출액]^t[정상이자금액]^t[연체이자금액]^t
                                                    [정상이자부족금액]^t[연체이자부족금액]^t[이자합계]^t[가상모계좌은행명]^t[가상계좌번호]^t[관리지점]^t[소비자등록번호]^t[지점대표번호]^t[지점주소]^t[지점장명]^t[지점우편번호]^t[빈칸]^t[바코드]^t[바코드]'],

            "1003039"       => ['1003039_01'    => '[주민번호앞]^t[주민번호뒤별]^t[고객명]^t[오늘년월일]^t[실거주도로명주소]^t[실거주우편번호]^t[계약번호]^t[계약일]^t[만기일]^t[빈칸]^t[잔액]^t[대출액]^t[정상이자금액]^t[연체이자금액]^t
                                                    [정상이자부족금액]^t[연체이자부족금액]^t[이자합계]^t[가상모계좌은행명]^t[가상계좌번호]^t[관리지점]^t[소비자등록번호]^t[지점대표번호]^t[지점주소]^t[지점장명]^t[지점우편번호]^t[빈칸]'],

            "1003040"       => ['1003040_01'    => '[실거주도로명주소]^t[고객명]^t[실거주우편번호]^t[주민번호앞]^t[주민번호뒤별]^t[오늘년월일]^t[계약일]^t[오늘년월일]^t[관리지점]^t[지점장명]^t[지점대표번호]^t[소비자등록번호]^t[지점주소]'],

            "1004002"       => ['1004002_01'    => '[주민번호앞]^t[주민번호뒤별]^t[고객명]^t[실거주도로명주소]^t[지점주소]^t[오늘년월일]^t[가상모계좌은행명]^t[가상계좌번호]^t[관리지점]^t[지점장명]^t[소비자등록번호]^t[지점대표번호]^t[빈칸]^t[바코드]'],


            "1003006"       => ['1003006_01'    => '[주민번호앞]^t[주민번호뒤한자리]^t[고객명]^t[빈칸]^t[빈칸]^t[빈칸]^t[계약일]^t[대출액]^t[관할법원명]^t[오늘년월일]^t[이자합계-한글]^t[이자합계]^t[가상모계좌은행명]^t[가상계좌번호]^t[관리지점]^t
                                                    [지점장명]^t[지점대표번호]^t[지점주소]^t[빈칸]^t[빈칸]^t[소비자등록번호]^t[실거주도로명주소]^t[바코드]'],


            "1003007"       => ['1003007_01'    => '[주민번호앞]^t[주민번호뒤한자리]^t[고객명]^t[빈칸]^t[빈칸]^t[빈칸]^t[계약일]^t[대출액]^t[관할법원명]^t[오늘년월일]^t[이자합계-한글]^t[이자합계]^t[가상모계좌은행명]^t[가상계좌번호]^t[관리지점]^t
                                                    [지점장명]^t[지점대표번호]^t[지점주소]^t[빈칸]^t[빈칸]^t[소비자등록번호]^t[실거주도로명주소]^t[바코드]'],

            "1001041"       => ['1001041_01'    => '[사건번호]^t[고객명]^t[채권자번호]^t[가상계좌번호]^t[오늘년월일]^t[개회-관할법원명]^t[빈칸]'],
            
            "1001067"       => ['1001067_01'    => '[신청일]^t[(ct)br_nm]^t[지점대표번호]^t[소바지등록번호]^t[지점팩스번호]^t[(ct)bizr_no]^t[지점주소]^t[보증인]^t[보증인휴대폰]^t[보증인생년]^t[보증인생월]^t[보증인생일]^t[보증인집전화]^t
                                                    [보증인실거주도로명주소]^t[고객명]^t[실거주도로명주소]^t[빈칸]^t[빈칸]^t[만기일]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[보증인주민번호앞]^t[보증인주민번호뒤]'],
            
            "1001061"       => ['1001061_01'    => '[보증인]^t[보증인주민번호]^t[보증인실거주도로명주소]^t[대출액]^t[계약일]^t[만기일]^t[금리-%]^t[연체금리-%]^t[고객명]^t[주민등록번호]^t[실거주도로명주소]^t
                                                    [약정일]^t[가상모계좌은행명]^t[가상계좌번호]^t[상환방법]^t[보증인]^t[지점대표번호]^t[지점주소]^t[대부업등록번호]'],

            "1001058"       => ['1001058_01'    => '[주민번호앞]^t[주민번호뒤한자리]^t[연체건수]^t[빈칸]^t[1차심사결과]^t[고객명]^t[관리지점]^t[빈칸]^t[집전화1]^t[집전화2]^t[집전화3]^t[통신사]^t[휴대폰1]^t[휴대폰2]^t[휴대폰3]^t[이메일]^t
                                                    [빈칸]^t[직장전화1]^t[직장전화2]^t[직장전화3]^t[팩스1]^t[팩스2]^t[팩스3]^t[재대출금지]^t[빈칸]^t[우편물수령지코드명]^t[직장정보구분]^t[실거주우편번호앞]^t[실거주우편번호뒤]^t[실거주도로명기본주소]^t
                                                    [실거주도로명상세주소]^t[등본우편번호앞]^t[등본우편번호뒤]^t[등본도로명기본주소]^t[등본도로명상세주소]^t[기타우편번호앞]^t[기타우편번호뒤]^t[기타도로명기본주소]^t[기타도로명상세주소]^t
                                                    [직장우편번호앞]^t[직장우편번호뒤]^t[직장도로명기본주소]^t[직장도로명상세주소]^t[빈칸]^t[주거소유자명]^t[빈칸]^t[보증금(시세)]^t[거주기간-년]^t[거주기간-월]^t[결혼상태]^t[맞벌이]^t[월수입]^t
                                                    [배우자월수입]^t[직업]^t[연수입]^t[직장명]^t[직장-부서]^t[근속년]^t[근속개월]^t[고용형태]^t[차량유무]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[빈칸]^t[집중고객여부]^t[고객메모]',
                                '1001058_02'    => '[(전화이력)주민번호]^t[(전화이력)통신사]^t[(전화이력)휴대폰]^t[(전화이력)저장자]^t[(전화이력)저장일시]^n',
                                '1001058_03'    => '[(주소이력)주민번호]^t[(주소이력)주소구분]^t[(주소이력)우편번호]^t[(주소이력)기본주소]^t[(주소이력)상세주소]^t[(주소이력)저장자]^t[(주소이력)저장일시]^n',
                                '1001058_04'    => '[(직장이력)주민번호]^t[빈칸]^t[(직장이력)직장명]^t[(직장이력)직업]^t[(직장이력)급여일]^t[(직장이력)직장-부서]^t[(직장이력)고용형태]^t[(직장이력)근무기간]^t[(직장이력)저장자]^t[(직장이력)저장일시]^n'],

            "1001070_01"    => ['1001070_01_01' => '[고객명]^t[동의년]^t[동의월]^t[동의일]^t[yn01]^t[yn02]^t[yn03]^t[yn04]^t[yn05]^t[yn06]^t[yn07]^t[yn08]^t[yn09]^t[yn10]^t[yn11]^t[yn12]^t[yn13]^t[yn14]^t[yn15]^t[yn16]^t[yn17]^t[yn18]^t[yn19]^t[yn20]^t[yn21]^t[yn22]^t[nryn]'],
            "1001070_02"    => ['1001070_02_01' => '[고객명]^t[동의년]^t[동의월]^t[동의일]^t[yn01]^t[yn02]^t[yn03]^t[yn04]^t[yn05]^t[yn06]^t[yn07]^t[yn08]^t[yn09]^t[yn10]^t[yn11]^t[yn12]^t[yn13]^t[yn14]^t[yn15]^t[yn16]^t[yn17]^t[yn18]^t[yn19]^t[yn20]^t[yn21]^t[yn22]^t[nryn]'],
            "1001070_03"    => ['1001070_03_01' => '[고객명]^t[동의년]^t[동의월]^t[동의일]^t[yn01]^t[yn02]^t[yn03]^t[yn04]^t[yn05]^t[yn06]^t[yn07]^t[yn08]^t[yn09]^t[yn10]^t[yn11]^t[yn12]^t[yn13]^t[yn14]^t[yn15]^t[yn16]^t[yn17]^t[yn18]^t[yn19]^t[yn20]^t[yn21]^t[yn22]^t[nryn]'],
            "1001070_04"    => ['1001070_04_01' => '[고객명]^t[동의년]^t[동의월]^t[동의일]^t[yn01]^t[yn02]^t[yn03]^t[yn04]^t[yn05]^t[yn06]^t[yn07]^t[yn08]^t[yn09]^t[yn10]^t[yn11]^t[yn12]^t[yn13]^t[yn14]^t[yn15]^t[yn16]^t[yn17]^t[yn18]^t[yn19]^t[yn20]^t[yn21]^t[yn22]^t[nryn]'],
        ];

        if( !isset($dataArray[$title]) )
        {
            Log::info("[Ubi Error #1]");
            return false;
        }

        return $dataArray[$title];
    }



    /*
        CUST_INFO, CUST_INFO_EXTRA, LOAN_INFO 데이터 파싱
        $dataArray : 파싱할 배열
        return $dataArray : 파싱된 배열
    */
    private function contentParserERP($dataArray, $_DATA, $title)
    {
        log::info($title);
        $loan_info_no = $this->loan_info_no;
        $basis_date = !empty($_DATA['basis_date']) ? $_DATA['basis_date'] : date("Y-m-d") ;

        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = Array
        (
            //  CUST_INFO
            "[고객번호]"                => "cno",
            "[고객명]"                  => "name",
            "[고객생년월일]"            => "birthday",
            "[고객생년]"                => "birth_year",
            "[고객생월]"                => "birth_month",
            "[고객생일]"                => "birth_date",
            "[성별]"                    => "gender",
            "[집중고객여부]"            => "attribute_manage_cd_nm",
            "[연체사유]"                => "attribute_delay_cd_nm",
            "[주민등록번호]"            => "ssn",
            "[주민등록번호2]"           => "ssn2",
            "[주민등록번호3]"           => "ssn3",
            "[주민번호앞]"              => "ssn_1",
            "[주민번호뒤]"              => "ssn_2",
            "[주민번호뒤별]"            => "ssn_2_2",
            "[주민번호뒤한자리]"        => "ssn_2_3",
            "[최초대출액]"              => "first_loan_money",
            "[최초대출액-한글]"         => "first_loan_money_kor",
            "[고객계좌]"                => "first_loan_bank_ssn",
            "[재대출금지]"              => "attribute_reloan_cd_nm",
            "[증액금지]"                => "attribute_addloan_cd_nm",

            //  LOAN_INFO
            "[계약번호]"                => "lno",
            "[대출일]"                  => "loan_date",
            "[계약일]"                  => "contract_date",
            "[계약일-한글]"             => "contract_date_kor",
            "[계약일-숫자]"             => "contract_date_num",
            "[만기일]"                  => "contract_end_date",
            "[만기일-한글]"             => "contract_end_date_kor",
            "[만기일-숫자]"             => "contract_end_date_num",
            // "[만기-계약]"               => "ln_term",
            "[대출액]"                  => "loan_money",
            "[잔액]"                    => "balance",
            "[최종입금일]"              => "last_in_date",
            "[약정일]"                  => "contract_day",
            "[약정일-문구]"             => "contract_day_str",
            "[상환일]"                  => "return_date",
            "[상품구분]"                => "pro_div_nm",
            "[한도금액]"                => "limit_money",
            "[한도금액-한글]"           => "limit_money_kor",
            "[금리]"                    => "loan_rate",
            "[연체금리]"                => "loan_delay_rate",
            "[월금리]"                  => "loan_rate_month",
            "[월연체금리]"              => "loan_delay_rate_month",
            "[금리-%]"                  => "loan_rate_per",
            "[연체금리-%]"              => "loan_delay_rate_per",
            "[월금리-%]"                => "loan_rate_month_per",
            "[월연체금리-%]"            => "loan_delay_rate_month_per",
            "[연체일수]"                => "delay_term",
            "[화해일자]"                => "settle_date",
            "[미수금]"                  => "misu_money",
            "[대출액-한글]"             => "loan_money_kor",
            "[연체개월]"                => "delay_term_month",
            "[이자합계-한글]"           => "interest_sum_kor",
            "[이자합계]"                => "interest_sum",
            "[잔액-한글]"               => "balance_kor",
            "[소비자등록번호]"          => "cust_reg_ssn",
            "[소멸시효완성여부]"        => "lost_date_result",
            "[원리금합계-한글]"         => "balance_interest_kor",
            "[원리금합계]"              => "balance_interest",
            "[상실일]"                  => "kihan_date",
            "[완제일]"                  => "fullpay_date",
            "[정상이자금액]"            => "interest",
            "[연체이자금액]"            => "delay_interest_sum",
            "[정상이자부족금액]"        => "lack_interest",
            "[연체이자부족금액]"        => "lack_delay_interest_sum",
            "[총부족금액]"              => "tot_lack_interest",
            "[총납입금액]"              => "tot_in_money",              //정상이자+연체이자+부족금
            "[상환방법]"                => "return_method_cd",
            "[중도상환수수료]"          => "return_fee",
            "[계약기간]"                => "loan_term",
            "[거래일]"                  => "last_trade_date",
            "[계좌상태]"                => "status",
            "[이수일자]"                => "take_date",
            "[계약순번]"                => "loan_seq",
            "[연체건수]"                => "delay_cnt",
            "[최장연체일수]"            => "delay_term_max",
            "[지점회계담당]"            => "branch_acc_user",
            "[상환일이자금액]"          => "return_date_interest",
            

            "[보증인]"                  => "g_name",
            "[보증인집전화]"            => "g_ph1",
            "[보증인휴대폰]"            => "g_ph2",
            "[보증인생년]"              => "g_birth_year",
            "[보증인생월]"              => "g_birth_month",
            "[보증인생일]"              => "g_birth_date",
            "[보증인실거주도로명주소]"  => "g_addr1",
            "[보증인주민번호앞]"        => "g_ssn_1",
            "[보증인주민번호뒤]"        => "g_ssn_2",
            "[보증인주민번호뒤별]"      => "g_ssn_2_2",
            "[보증인주민번호]"          => "g_ssn",
            "[보증최고금액]"            => "gtrn_am",
            "[보증최고금액-한글]"       => "gtrn_am_kor",
            "[조기상환조건]"            => "mdw_rpt_msg",
            "[중도상환수수료-문구]"     => "mdw_rpt_fee_rt_msg",
            "[조기상환안내문구]"        => "mdw_rpt_total_msg",
            "[bk_nm]"                   => "bk_nm",
            "[bk_sur_nm]"               => "bk_usr_nm",
            
            "[차입기관]"                => "b_name",
            '[담보제공일]'              => "start_date",

            "[양수인예금계좌]"          => "dpt_act_nm",
            "[양수인담당자]"            => "chpr_nm", 

            //  CUST_INFO_EXTRA
            "[실거주우편번호]"          => "zip1",
            "[실거주우편번호앞]"        => "zip1_1",
            "[실거주우편번호뒤]"        => "zip1_2",
            "[실거주도로명기본주소]"    => "addr11",
            "[실거주도로명상세주소]"    => "addr12",
            "[실거주도로명주소]"        => "addr1",
            "[실거주도로명주소(풀)]"    => "zipaddr1",
            "[등본우편번호]"            => "zip2",
            "[등본우편번호앞]"          => "zip2_1",
            "[등본우편번호뒤]"          => "zip2_2",
            "[등본도로명기본주소]"      => "addr21",
            "[등본도로명상세주소]"      => "addr22",
            "[기타우편번호]"            => "zip4",
            "[기타우편번호앞]"          => "zip4_1",
            "[기타우편번호뒤]"          => "zip4_2",
            "[기타도로명기본주소]"      => "addr41",
            "[기타도로명상세주소]"      => "addr42",
            "[집전화]"                  => "ph_home",
            "[집전화1]"                 => "ph11",
            "[집전화2]"                 => "ph12",
            "[집전화3]"                 => "ph13",
            "[직장우편번호앞]"          => "zip3_1",
            "[직장우편번호뒤]"          => "zip3_2",
            "[직장도로명기본주소]"      => "addr31",
            "[직장도로명상세주소]"      => "addr32",
            "[직장도로명주소]"          => "addr3",
            "[직장전화]"                => "ph_com",
            "[직장전화1]"               => "ph31",
            "[직장전화2]"               => "ph32",
            "[직장전화3]"               => "ph33",
            "[직장명]"                  => "com_name",
            "[직장-부서]"               => "com_part",
            "[통신사]"                  => "ph2_com",
            "[휴대폰]"                  => "ph_tel",
            "[휴대폰1]"                 => "ph21",
            "[휴대폰2]"                 => "ph22",
            "[휴대폰3]"                 => "ph23",
            "[고객메모]"                => "cust_memo",
            "[이메일]"                  => "email",
            "[팩스1]"                   => "ph51",
            "[팩스2]"                   => "ph52",
            "[팩스3]"                   => "ph53",
            "[직장정보구분]"            => "office_info_sect",
            "[우편물수령지]"            => "post_addr",
            "[우편물수령지코드명]"       => "post_send_cd_nm",
            "[주거구분]"                => "house_own",
            "[주거종류]"                => "house_type",
            "[주거소유자명]"            => "house_own_name",
            "[거주기간-년]"             => "stay_year",
            "[거주기간-월]"             => "stay_months",
            "[맞벌이]"                  => "double_income",
            "[결혼상태]"                => "marry_status",
            "[월수입]"                  => "monthly_income",
            "[연수입]"                  => "year_income",
            "[근속년]"                  => "com_year",
            "[근속개월]"                => "com_months",
            "[직업]"                    => "job",
            "[고용형태]"                => "com_employ_type",
            "[실거주지번주소]"          => "old_addr11",
            "[직장지번주소]"            => "old_addr31",
            
            
            "[빈칸]"                    => "_BLANK",
            "[해당사항없음]"            => "bojng",
            "[오늘년월일]"              => "today_8",
            "[오늘년월일-한글]"         => "today_8_kor",
            "[지점주소]"                => "branch_addr",
            "[지점우편-주소]"           => "branch_zipaddr",
            "[지점우편번호]"            => "branch_zip",
            "[지점대표번호]"            => "branch_ph",
            "[지점팩스번호]"            => "branch_fax",
            "[지점장명]"                => "branch_ceo_name",
            "[사업자등록번호]"          => "branch_ssn",
            "[사업자등록번호1]"         => "branch_ssn1",
            "[사업자등록번호2]"         => "branch_ssn2",
            "[사업자등록번호3]"         => "branch_ssn3",
            "[관리지점]"                => "manage_nm",         //  다른테이블
            "[관리담당자]"              => "manager_nm",        //  다른테이블
            "[상호]"                    => "com_info_01",
            "[대부업등록번호]"          => "com_info_02",
            "[사업자등록번호(대표)]"    => "com_info_03",
            
            "[가상계좌번호]"            => "vir_acct_ssn",
            "[가상모계좌은행명]"        => "mo_acct_bank_nm",
            "[가상모계좌은행명-은행제거]"=> "mo_acct_bank_nm_n",
            "[가상모계좌번호]"          => "mo_acct_ssn",

            "[보증금(시세)]"            => "house_bj_price",
            "[배우자월수입]"            => "partner_monthly_money",
            
            
            "[부채증명확인서문구]"      => "simple_revive",

            "[1차심사결과]"             => "app_status_cd_nm",
            "[차량유무]"                => "cust_car_yn",



            "[바코드]"                  => "barcode_num",
        );
        
        $queryResult = DB::  TABLE("cust_info")
                            ->JOIN("cust_info_extra", "cust_info.no", "=", "cust_info_extra.cust_info_no")
                            ->JOIN("loan_info" , "cust_info.no", "=", "loan_info.cust_info_no")
                            ->SELECT("cust_info.no as cno", "cust_info.name", "cust_info.ssn", "cust_info.attribute_manage_cd", "cust_info.attribute_delay_cd", "cust_info.first_loan_money", "cust_info.first_loan_bank_ssn", "cust_info.attribute_reloan_cd", "cust_info.attribute_addloan_cd")
                            // ->ADDSELECT("CI.BAN_CALL", "CI.BAN_SMS", "CI.BAN_POST")
                            ->ADDSELECT("cust_info_extra.save_time", "cust_info_extra.save_id", "cust_info_extra.zip1", "cust_info_extra.addr11", "cust_info_extra.addr12", "cust_info_extra.zip2", "cust_info_extra.addr21", "cust_info_extra.addr22", "cust_info_extra.ph11", "cust_info_extra.ph12", "cust_info_extra.ph13", "cust_info_extra.zip3", "cust_info_extra.addr31", "cust_info_extra.addr32")
                            ->ADDSELECT("cust_info_extra.ph31", "cust_info_extra.ph32", "cust_info_extra.ph33","cust_info_extra.zip4", "cust_info_extra.addr41", "cust_info_extra.addr42", "cust_info_extra.stay_year", "cust_info_extra.stay_months", "cust_info_extra.monthly_income", "cust_info_extra.job_cd", "cust_info_extra.com_year", "cust_info_extra.com_months")
                            ->ADDSELECT("cust_info_extra.pay_day", "cust_info_extra.ph2_com", "cust_info_extra.email", "cust_info_extra.post_send_cd", "cust_info_extra.ph51", "cust_info_extra.ph52", "cust_info_extra.ph53",  "cust_info_extra.com_name", "cust_info_extra.com_part", "cust_info_extra.ph21", "cust_info_extra.ph22", "cust_info_extra.ph23", "cust_info_extra.memo", "cust_info_extra.house_type_cd")
                            ->ADDSELECT("cust_info_extra.house_own_cd", "cust_info_extra.house_own_name", "cust_info_extra.marry_status_cd", "cust_info_extra.double_income_chk", "cust_info_extra.year_income", "cust_info_extra.com_employ_cd")
                            ->ADDSELECT("cust_info_extra.old_addr11", "cust_info_extra.old_addr31")
                            ->ADDSELECT("loan_info.no as lno", "loan_info.return_fee_rate", "loan_info.status", "loan_info.last_trade_date", "loan_info.contract_date", "loan_info.contract_end_date", "loan_info.loan_money", "loan_info.balance", "loan_info.last_in_date", "loan_info.contract_day", "loan_info.return_date", "loan_info.return_date_biz")
                            ->ADDSELECT("loan_info.pro_cd", "loan_info.manager_code", "loan_info.manager_id", "loan_info.limit_money", "loan_info.loan_rate", "loan_info.loan_delay_rate", "loan_info.loan_date", "loan_info.delay_term_max")
                            ->ADDSELECT("loan_info.delay_term", "loan_info.loan_term", "loan_info.manager_code", "loan_info.settle_date", "loan_info.return_method_cd", "loan_info.misu_money", "loan_info.interest", "loan_info.delay_interest", "loan_info.delay_money", "loan_info.lack_interest", "loan_info.lack_delay_interest")
                            ->ADDSELECT("loan_info.lack_delay_money", "loan_info.interest_sum", "loan_info.lost_date", "loan_info.kihan_date", "loan_info.fullpay_date", "loan_info.take_date", "loan_info.loan_seq", "loan_info.delay_cnt", "loan_info.return_date_interest")
                            ->WHERE("loan_info.save_status","Y")
                            ->ORDERBY("loan_info.no", "desc")
                            ->WHERE("loan_info.no", $loan_info_no) -> GET();

        $configArr = Func::getConfigArr();
        $userArr = Func::getUserList();
        $getProCode = Func::getConfigArr('pro_cd');

        $String = [];
        $i = 0;
        $j = 0;
        foreach($queryResult as $idx => $v)
        {
            if( !empty($v->manager_code) )
            {
                $branchArr = DB::TABLE("branch")->SELECT("*")->WHERE('save_status','Y')->WHERE("code", $v->manager_code)->first();
            }
            
            //보증인
            $guarantor = DB::TABLE("loan_info_guarantor")->SELECT("*")->WHERE('save_status','Y')->WHERE("cust_info_no", $v->cno)->WHERE("loan_info_no", $v->lno)->ORDERBY("save_time", "desc")->first();


            //담보
            $borrow = DB::TABLE("borrow")
                            ->JOIN("borrow_comp", "borrow.borrow_comp_no", "=", "borrow_comp.no")
                            ->JOIN("borrow_comp_sub bcs", "borrow.borrow_comp_no", "=", "bcs.borrow_comp_no")
                            ->SELECT("borrow_comp.bank_name", "borrow_comp.bank_ssn", "bcs.sub_mo_bank_cd", "borrow_comp.manager", "borrow_comp.ph11", "borrow_comp.ph12", "borrow_comp.ph13", "borrow.start_date")
                            ->WHERE('borrow.cust_info_no', $v->cno)->WHERE('borrow.save_status', 'Y')->ORDERBY('borrow.save_time', 'desc')->first();

            //  가상계좌
            $vir_v = DB::TABLE("vir_acct")->SELECT("bank_cd", "mo_ssn", "vir_acct_ssn")->WHERE("save_status", "Y")->WHERE("cust_info_no", $v->cno)->ORDERBY("save_time", "desc")->first();

            $_BLANK = "";
            if( in_array($title, $this->barcode_number) )
            {
                $barcode_num = $title."0101_".$v->cno."_".$v->lno;
            }
            //$today_8 = date("Y-m-d");
            $today_8 = $basis_date;

            $bojng           = "해당사항없음";
            $muser           = Func::getUserList('10000'.$v->manager_code);
            $branch_acc_user = !empty($v->manager_code) && !empty($muser) ? Func::nvl($muser->name, '') : '';

            $house_bj_price        = "0";
            $partner_monthly_money = "0";
            $cust_car_yn           = "N";
            $app_status_cd_nm      = "[1차심사결과]";            //  이건 고객정보출력 양식지에서 사용함 -> 아래 해당 함수에서 수정해줌

            // CUST_INFO
            $cno                    = $v->cno;
            $name                   = $v->name;
            $ssn_1                  = substr($v->ssn, 0, 6);
            $ssn_2                  = substr($v->ssn, 6);
            $ssn_2_2                = substr($v->ssn, 6, 1)."******";
            $ssn_2_3                = substr($v->ssn, 6, 1);
            $ssn                    = $ssn_1."-".$ssn_2;
            $ssn2                   = $ssn_1."-".$ssn_2_2;
            $ssn3                   = substr($v->ssn, 0, 6)."-".substr($ssn_2_2, 0, 4);
            $birth_year             = Func::ssntoyears($v->ssn);
            $birth_month            = substr($v->ssn, 2, 2);
            $birth_date             = substr($v->ssn, 4, 2);
            $birthday               = $birth_year."-".$birth_month."-".$birth_date;
            //$first_loan_money     = isset($v->first_loan_money)?number_format($v->first_loan_money):'';
            //$first_loan_money_kor = Func::numberToKor($v->first_loan_money);
            $attribute_reloan_cd_nm = Func::nvl($configArr['no_reloan_cd'][$v->attribute_reloan_cd], $v->attribute_reloan_cd);

            $com_info_01 = $configArr['com_info']['01'];
            $com_info_02 = $configArr['com_info']['02'];
            $com_info_03 = $configArr['com_info']['03'];
            // $attribute_addloan_cd_nm = Func::nvl($configArr['no_addloan_cd'][$v->attribute_addloan_cd], $v->attribute_addloan_cd);      //  conf_code 에 아직 코드 가 없음!!

            if( substr($v->ssn,6,1) == "9" || substr($v->ssn,6,1) == "1" || substr($v->ssn,6,1) == "3" || substr($v->ssn,6,1) == "5" || substr($v->ssn,6,1) == "7" )
            {
                $gender = "남자";
            }
            else
            {
                $gender = "여자";
            }

            $attribute_manage_cd_nm = Func::nvl($configArr['manage_rsn_cd'][$v->attribute_manage_cd], $v->attribute_manage_cd);
            $attribute_delay_cd_nm  = Func::nvl($configArr['delay_rsn_cd'][$v->attribute_delay_cd], $v->attribute_delay_cd);

            // CUST_INFO_EXTRA
            $post_send_cd_nm     = Func::nvl($configArr['addr_cd'][$v->post_send_cd], '');
            $delay_cnt           = Func::nvl($v->delay_cnt, '0');
            $delay_term_max      = Func::nvl($v->delay_term_max, '0');
            $zip1                = Func::nvl($v->zip1,'');
            $zip1_1              = substr($v->zip1, 0, 3);
            $zip1_2              = substr($v->zip1, 3);
            $addr11              = $v->addr11;
            $addr12              = $v->addr12;
            $addr1               = $v->addr11." ".$v->addr12;
            $zipaddr1            = "(".$zip1_1."-".$zip1_2.") ".$v->addr11." ".$v->addr12;
            $zip2                = $v->zip2;
            $zip2_1              = substr($v->zip2, 0, 3);
            $zip2_2              = substr($v->zip2, 3);
            $addr21              = $v->addr21;
            $addr22              = $v->addr22;
            $zip4                = $v->zip4;
            $zip4_1              = substr($v->zip4, 0, 3);
            $zip4_2              = substr($v->zip4, 3);
            $addr41              = $v->addr41;
            $addr42              = $v->addr42;
            $ph_home             = $v->ph11."-".$v->ph12."-".$v->ph13;
            $ph11                = $v->ph11;
            $ph12                = $v->ph12;
            $ph13                = $v->ph13;
            $zip3_1              = isset($v->zip3)?substr($v->zip3, 0, 3):'';
            $zip3_2              = isset($v->zip3)?substr($v->zip3, 3):'';
            $zip3                = $zip3_1.$zip3_2;
            $addr31              = $v->addr31;
            $addr32              = $v->addr32;
            $addr3               = $v->addr31." ".$v->addr32;
            $ph_com              = $v->ph31."-".$v->ph32."-".$v->ph33;
            $ph31                = $v->ph31;
            $ph32                = $v->ph32;
            $ph33                = $v->ph33;
            $com_name            = $v->com_name;
            $com_part            = $v->com_part;
            $ph_tel              = $v->ph21."-".$v->ph22."-".$v->ph23;
            $ph2_com             = $v->ph2_com;
            $ph21                = $v->ph21;
            $ph22                = $v->ph22;
            $ph23                = $v->ph23;
            $cust_memo           = $v->memo;
            $first_loan_bank_ssn = $v->first_loan_bank_ssn;
            $email               = $v->email;
            $ph51                = $v->ph51;
            $ph52                = $v->ph52;
            $ph53                = $v->ph53;
            $post_addr           = "";
            if( !empty($v->post_send_cd) )
            {
                $post_addr = Func::nvl($v->{"addr".$v->post_send_cd."1"},"")." ".Func::nvl($v->{"addr".$v->post_send_cd."2"},"");
            }
            $office_info_sect = '본인';
            $house_own        = Func::nvl($configArr['house_own_cd'][$v->house_own_cd],$v->house_own_cd);
            $house_type       = Func::nvl($configArr['house_type_cd'][$v->house_type_cd],$v->house_type_cd);
            $house_own_name   = Func::nvl($v->house_own_name, '');
            $stay_year        = Func::nvl($v->stay_year, '');
            $stay_months      = Func::nvl($v->stay_months, '');
            $double_income    = Func::nvl($v->double_income_chk, '');
            $marry_status     = Func::nvl($configArr['marry_status_cd'][$v->marry_status_cd],$v->marry_status_cd);
            $monthly_income   = Func::nvl($v->monthly_income, '0');
            $year_income      = Func::nvl($v->year_income, '0');
            $com_year         = Func::nvl($v->com_year, '0');
            $com_months       = Func::nvl($v->com_months, '0');
            if(isset($com_year) && isset($com_months))
            {
                $com_term = $com_year."년 ".$com_months."개월";
            }
            else if(isset($com_year))
            {
                $com_term = $com_year."년";
            }
            else if(isset($com_months))
            {
                $com_term = $com_months."개월";
            }
            else
            {
                $com_term = '';
            }
            $job             = isset($v->job_cd)?Func::getJobCdStr($v->job_cd):'';
            $com_employ_type = Func::nvl($configArr['employ_cd'][$v->com_employ_cd], $v->com_employ_cd);
            $save_date       = isset($v->save_time)?Func::dateFormat(substr($v->save_time,0,8)):'';
            $save_id         = isset($v->save_id) ? (!empty($userArr[$v->save_id]->name) ? $userArr[$v->save_id]->name : $v->save_id) : '';
            $pay_day         = Func::nvl($v->pay_day, '');
            $co_addr         = '직장';
            $old_addr11      = $v->old_addr11;
            $old_addr31      = $v->old_addr31;

            //$rownum = $v->rownum;

            //  LONA_INFO
            $lno                       = $v->lno;
            $loan_date                 = Func::dateFormat($v->loan_date);
            $contract_date_num         = $v->contract_date;
            $contract_date             = Func::dateFormat($v->contract_date);
            $contract_date_kor         = Func::dateFormat($v->contract_date, "kor");
            $contract_end_date_num     = $v->contract_end_date;
            $contract_end_date         = Func::dateFormat($v->contract_end_date);
            $contract_end_date_kor     = Func::dateFormat($v->contract_end_date, "kor");
            $ln_term                   = $v->loan_term;
            $loan_money                = $v->loan_money;
            $gtrn_am                   = number_format($v->loan_money * 2);
            $gtrn_am_kor               = Func::numberToKor($v->loan_money * 2);
            $balance                   = $v->balance;
            $last_in_date              = Func::dateFormat($v->last_in_date);
            $contract_day              = $v->contract_day;
            $contract_day_str          = "매월 ".$contract_day." 일";
            $return_date               = Func::dateFormat($v->return_date);



            $limit_money               = $v->limit_money;
            $limit_money_kor           = Func::numberToKor($v->limit_money);
            $loan_rate                 = number_format($v->loan_rate ,2);
            $loan_delay_rate           = number_format($v->loan_delay_rate, 2);
            $loan_rate_month           = number_format(floor(($v->loan_rate / 12 * 100))/100,2);
            $loan_delay_rate_month     = number_format(floor(($v->loan_delay_rate / 12 * 100))/100,2);
            $loan_rate_per             = number_format($v->loan_rate,2)." %";
            $loan_delay_rate_per       = number_format($v->loan_delay_rate,2)." %";
            $loan_rate_month_per       = $loan_rate_month." %";
            $loan_delay_rate_month_per = $loan_delay_rate_month." %";
            $loan_seq                  = empty($v->loan_seq) ? "1" : $v->loan_seq;
            $return_date_interest      = number_format($v->return_date_interest);




            $delay_term       = $v->delay_term;
            $settle_date      = Func::dateFormat($v->settle_date);
            $misu_money       = $v->misu_money;
            $loan_money_kor   = Func::numberToKor($v->loan_money);
            $delay_term_month = (floor($v->delay_term / 30) == 0)? floor($v->delay_term / 30) + 1 : floor($v->delay_term / 30);            //  ????이거 맞나
            $interest_sum_kor = Func::numberToKor($v->interest_sum);
            $interest_sum     = Func::nvl($v->interest_sum, '');
            $balance_kor      = Func::numberToKor($v->balance);

            $lost_date_result = date("Ymd") < $v->lost_date ? "N" : "Y";

            $balance_interest = (int) $v->interest_sum + (int) $v->balance;
            $balance_interest_kor = Func::numberToKor($balance_interest);

            //  차기이자수납일 + 62일 로 해달라고 함.
            // $kihan_date = Func::dateFormat($v->kihan_date);
            $kihan_date = date("Y-m-d", strtotime($v->return_date."+ 62 days"));
            


            $fullpay_date            = isset($v->fullpay_date)?Func::dateFormat($v->fullpay_date):'';
            $interest                = $v->interest;
            $delay_interest_sum      = $v->delay_interest + $v->delay_money;
            $lack_interest           = $v->lack_interest;
            $lack_delay_interest_sum = $v->lack_delay_interest + $v->lack_delay_money;
            $tot_lack_interest       = $lack_interest + $lack_delay_interest_sum;
            $tot_in_money            = $interest + $delay_interest_sum + $tot_lack_interest;
            $return_method_cd        = $configArr['return_method'][$v->return_method_cd];
            $return_fee              = Func::nvl($configArr['return_fee_rate'][$v->return_fee_rate], $v->return_fee_rate);
            // $return_fee           = $configArr['mdw_rtn_max_cd']['2'];
            $loan_term               = $v->loan_term;
            $last_trade_date         = Func::dateFormat($v->last_trade_date);
            $status                  = Vars::$arrayContractSta[$v->status];
            $take_date               = Func::dateFormat($v->take_date);

            
            $br_nm = "주식회사 ".config('app.company');


            $mdw_rpt_fee_rt_msg = empty($v->return_fee_rate)?'법정상한금리와 약정금리 차이만큼의 이자차액이 중도상환수수료로 부과':'중도상환수수료(            )% 부과';
            $mdw_rpt_msg        = empty($v->return_fee_rate)?'대상고객은 12개월 이내 원금상환(일부상환포함)시 대출사용기간에 대한':'대상고객은 12개월 이내 완납 시';
            $mdw_rpt_total_msg  = empty($v->return_fee_rate)?'일부 대상고객은 12개월 이내 원금상환(일부상환포함)시 대출사용기간에 대한 법정상한금리와 약정금리 차이만큼의 이자차액이 중도상환수수료로 부과될 수 있습니다.':'대상고객은 12개월 이내 완납 시  중도상환수수료(  '.$v->return_fee_rate.'  )% 부과될 수 있습니다.';
            
            if( !empty($guarantor) )
            {
                $g_name = Func::nvl($guarantor->name, '해당사항없음');
                $g_ph11 = Func::nvl($guarantor->ph11, '');
                $g_ph12 = Func::nvl($guarantor->ph12, '');
                $g_ph13 = Func::nvl($guarantor->ph13, '');
                $g_ph1  = $g_ph11.(!empty($g_ph12)?"-".$g_ph12:"").(!empty($g_ph13)?"-".$$g_ph13:"");

                $g_ph21 = Func::nvl($guarantor->ph21, '');
                $g_ph22 = Func::nvl($guarantor->ph22, '');
                $g_ph23 = Func::nvl($guarantor->ph23, '');
                $g_ph2  = $g_ph21.(!empty($g_ph22)?"-".$g_ph22:"").(!empty($g_ph23)?"-".$$g_ph23:"");
                $g_ssn  = Func::nvl($guarantor->ssn, '');
                if(isset($g_ssn))
                {
                    $g_birth_year  = Func::ssntoyears($g_ssn);
                    $g_birth_month = substr($g_ssn, 2, 2);
                    $g_birth_date  = substr($g_ssn, 4, 2);
                    $g_ssn_1       = substr($g_ssn, 0, 6);
                    $g_ssn_2       = substr($g_ssn, 6);
                    $g_ssn_2_2     = substr($g_ssn, 6, 1)."******";
                    $g_ssn         = $g_ssn_1."-".$g_ssn_2;
                }
                else
                {
                    $g_birth_year  = '';
                    $g_birth_month = '';
                    $g_birth_date  = '';
                    $g_ssn_1       = '';
                    $g_ssn_2       = '';
                    $g_ssn_2_2     ='';
                    $g_ssn         = '';
                }

                $g_addr11 = Func::nvl($guarantor->addr11, '');
                $g_addr12 = Func::nvl($guarantor->addr12, '');
                $g_addr1  = $g_addr11." ".$g_addr12;
            }
            else
            {
                $g_name = '해당사항없음';
            }

            $bk_nm     = '신한';
            $bk_usr_nm = config('app.company');

            if( !empty($borrow) )
            {
                $b_name     = $borrow->bank_name;
                // $loan_no = $v->ssn.'';          //가상계좌 일련번호 없음
                $start_date = Func::dateFormat($v->start_date);

                $b_ph11 = Func::nvl($borrow->ph11, '');
                $b_ph12 = Func::nvl($borrow->ph12, '');
                $b_ph13 = Func::nvl($borrow->ph13, '');
                $b_ph1  = $b_ph11.(!empty($b_ph12)?"-".$b_ph12:"").(!empty($b_ph13)?"-".$$b_ph13:"");

                $dpt_act_nm = isset($borrow->sub_mo_bank_cd)?$configArr['bank_cd'][$borrow->sub_mo_bank_cd]:''." 계좌번호 : ".Func::nvl($borrow->bank_ssn, '').", 예금주 : ".Func::nvl($borrow->bank_name, '');
                $chpr_nm    = Func::nvl($borrow->bank_name, '')." ".Func::nvl($borrow->manager, '').", 전화번호 : ".$b_ph1;
            }

            if( !empty($branchArr) )
            {
                $cust_reg_ssn    = Func::nvl($branchArr->cust_reg_ssn, '');
                $branch_fax      = Func::fullPhFormat($branchArr->fax);
                $manage_nm       = str_replace("지점","",Func::nvl($branchArr->branch_name, ""))."지점";
                $manager_nm      = isset($userArr[$v->manager_id]->name) ? $userArr[$v->manager_id]->name : $v->manager_id;
                $branch_addr     = Func::nvl($branchArr->addr11, '')." ".Func::nvl($branchArr->addr12, '');
                $branch_zipaddr  = "(".substr($branchArr->zip,0,3)."-".substr($branchArr->zip,3).") ".Func::nvl($branchArr->addr11, '').Func::nvl($branchArr->addr12, '');
                $branch_zip      = Func::nvl($branchArr->zip, '');
                $branch_ph       = Func::fullPhFormat($branchArr->phone);
                $branch_ssn      = Func::nvl($branchArr->com_ssn, '');
                $branch_cust_ssn = Func::nvl($branchArr->cust_reg_ssn, '');

                if( !empty($branchArr->ceo_name) )
                {
                    $branch_ceo_name = isset($userArr[$branchArr->ceo_name]->name) ? $userArr[$branchArr->ceo_name]->name : $branchArr->ceo_name;
                }
    
                $branch_ssn1 = substr($branch_ssn, 0, 3);
                $branch_ssn2 = substr($branch_ssn, 3, 2);
                $branch_ssn3 = substr($branch_ssn, 5, 5);
            }
            
            if( !empty($vir_v) )
            {
                $vir_acct_ssn          = $vir_v->vir_acct_ssn;
                $mo_acct_bank_nm   = Func::nvl($configArr['bank_cd'][$vir_v->bank_cd], $vir_v->bank_cd);
                $mo_acct_bank_nm_n = str_replace("은행", "", Func::nvl($configArr['bank_cd'][$vir_v->bank_cd], $vir_v->bank_cd));
                $mo_acct_ssn       = $vir_v->mo_ssn;
            }
            else
            {
                $vir_acct_ssn          = '';
                $mo_acct_bank_nm   = '';
                $mo_acct_bank_nm_n = '';
                $mo_acct_ssn       = '';
            }



            // 기준일 이자 구하기
            if( $today_8 != date("Y-m-d") )
            {

                $loan = new Loan($lno);
                $val_int = $loan->getInterest(str_replace("-","",$today_8));
    
                $v->interest_sum   = $val_int['interest_sum'];
                $v->interest       = $val_int['interest'];
                $v->delay_interest = $val_int['delay_interest'];
                $v->delay_money    = $val_int['delay_money'];
                //Func::dateTerm($v->return_date_biz, $dt)
                $v->delay_term     = Func::dateTerm($v->return_date_biz, $today_8);

                $interest_sum         = Func::nvl($v->interest_sum, '');
                $interest_sum_kor     = Func::numberToKor($v->interest_sum);
                $interest             = $v->interest;
                $delay_interest_sum   = $v->delay_interest + $v->delay_money;
                $delay_term           = $v->delay_term;
                $balance_interest     = (int) $v->interest_sum + (int) $v->balance;
                $balance_interest_kor = Func::numberToKor($balance_interest);
                $tot_in_money         = $interest + $delay_interest_sum + $tot_lack_interest;
            }

            //  증액 계약서
            if( substr($title,0, 7) == "1001011" )
            {
                //  거래중 증액이 있을 경우 LOAN_MONEY, CONTRACT_DATE 구하기
                $_trade = DB::TABLE("loan_info_trade")->SELECT("trade_date", "balance")->WHERE("loan_info_no", $lno)->WHERE("trade_div", "O")->WHERE("trade_type", "12")->ORDERBY("seq", "desc")->first();
                if( !empty($_trade) )
                {
                    //  대출액 : 증액일 경우 증액당시 잔액으로 한다.
                    $loan_money_kor = Func::numberToKor($_trade->balance);
                    $loan_money     = $_trade->balance;
    
                    //  계약일 : 증액일 경우 증액일자로 한다
                    $contract_date_num = $_trade->trade_date;
                    $contract_date     = Func::dateFormat($_trade->trade_date);
                    $contract_date_kor = Func::dateFormat($_trade->trade_date, "kor");
                }
            }
            else if( substr($title,0,7) == "1001010" )  //  기한연장 계약서
            {
                //  만기연장 계약일 기준으로 금리를 책정한다.
                $_rate = DB::TABLE("loan_info_rate")->SELECT("loan_rate", "loan_delay_rate")->WHERE("loan_info_no", $this->loan_info_no)->WHERE("save_status", "Y")->WHERE("rate_date", "<=", $contract_date_num)->ORDERBY("rate_date", "desc")->FIRST();

                $loan_rate                 = number_format($_rate->loan_rate ,2);
                $loan_delay_rate           = number_format($_rate->loan_delay_rate, 2);
                $loan_rate_month           = number_format(floor(($_rate->loan_rate / 12 * 100))/100,2);
                $loan_delay_rate_month     = number_format(floor(($_rate->loan_delay_rate / 12 * 100))/100,2);
                $loan_rate_per             = number_format($_rate->loan_rate,2)." %";
                $loan_delay_rate_per       = number_format($_rate->loan_delay_rate,2)." %";
                $loan_rate_month_per       = $loan_rate_month." %";
                $loan_delay_rate_month_per = $loan_delay_rate_month." %";
            }
            /*      다시 빼달라고 요청함. 20210812
            else if( ($v->status == "C" || $v->status == "D") && in_array($title,["1003001","1003002","1004033","1004034","1004001","1003003","1003039","1001008","1004003","1001036","1001037","1003006","1003007"]) )
            {
                //  20210811 영업관리팀 요청
                //  안내장 안내장방문 독촉장 독촉장내용증명 독촉장서식1-1 채무조정안내문 기한이익상실통보 대출잔고증명 대출잔고증명화해 고발통보서(신용/담보)
                //  화해의 경우, 금액관련 [지점문의] 또는 공란 으로 표기

                $misu_money = "";
                $tot_in_money = "";
                $interest_sum_kor = ($title == "1001036" || $title == "1001037") ? "" :"지점문의";
                $interest_sum = "";
                $balance_kor = ($title == "1001036" || $title == "1001037") ? "" :"지점문의";
                $balance_interest_kor = ($title == "1001036" || $title == "1001037") ? "" :"지점문의";
                $balance_interest = "";
                $balance = "";
                $interest = "";
                $delay_interest_sum = "";
                $lack_interest = "";
                $lack_delay_interest_sum = "";
                $tot_lack_interest = "";
                $tot_in_money = "";
            }
            */

            $today_8_kor = Func::dateFormat(str_replace("-","",$today_8), "kor");

            foreach( $dataArray as $k => $val )
            {
                if($j)
                {
                    $String[$i][$k] .= $val;
                }
                else
                {
                    $String[$i][$k] = $val;
                }
            }
            $j++;

            foreach( $array_parse_string as $key => $value )
            {
                $value2 = Func::nvl( ${$value}, '' );
    
                foreach( $dataArray as $k => $val )
                {
                    $String[$i][$k] = str_replace($key, $value2, $String[$i][$k]);
                }
            }
            $i++;
            $j=0;
        }

        $firstflag = true;
        foreach( $String as $idx => $val )
        {
            foreach($val as $k => $v)
            {
                if( $firstflag )
                {
                    $dataArray[$k] = $v;
                }
                else
                {
                    $dataArray[$k] .= $v;
                }
            }
            $firstflag = false;
        }

        return $dataArray;
    }



    /*
        LOAN_APP, LOAN_APP_EXTRA 데이터 파싱
        $dataArray : 파싱할 배열
        return $dataArray : 파싱된 배열
    */
    private function contentParserUPS($dataArray, $_DATA, $title)
    {
        $configArr = Func::getConfigArr();

        $loan_app_no = $this->loan_app_no;

        if( !$loan_app_no )
        {
            return false;
        }

        $array_parse_string = Array
        (
            //  LOAN_APP
            "[신청일]"              => "app_date",
            "[고객명]"              => "name",                          //  고객이름
            "[고객생년]"            => "birth_year",                    //  생년
            "[고객생월]"            => "birth_month",                   //  생월
            "[고객생일]"            => "birth_date",                    //  생일
            "[성별]"                => "gender",                        //  성별(남/여)
            "[주민번호앞]"          => "ssn_1",
            "[주민번호뒤]"          => "ssn_2",
            "[주민번호뒤별]"        => "ssn_2_2",
            "[집전화]"              => "ph_home",
            "[휴대폰]"              => "ph_tel",
            "[만기일]"              => "contract_end_date",
            "[만기일-한글]"         => "contract_end_date_kor",
            "[고객계좌]"            => "loan_bank_ssn",
            "[한도금액-한글]"       => "limit_money_kor",
            "[한도금액]"            => "limit_money",
            "[대출액-한글]"         => "loan_money_kor",
            "[대출액]"              => "loan_money",
            "[계약기간]"            => "loan_term",
            "[계약일]"              => "contract_date",             //  승인일로 수정함
            "[계약일-한글]"         => "contract_date_kor",
            "[약정일]"              => "contract_day",
            "[금리]"                => "loan_rate",
            "[연체금리]"            => "loan_delay_rate",
            "[월금리]"              => "loan_rate_month",
            "[월연체금리]"          => "loan_delay_rate_month",
            "[금리-%]"              => "loan_rate_per",
            "[연체금리-%]"          => "loan_delay_rate_per",
            "[월금리-%]"            => "loan_rate_month_per",
            "[월연체금리-%]"        => "loan_delay_rate_month_per",
            "[중도상환수수료]"      => "return_fee",
            "[최초대출액]"          => "first_loan_money",
            "[최초대출액-한글]"     => "first_loan_money_kor",
            "[고객생년월일]"        => "birthday",
            "[상환방법]"            => "return_method_cd",
            "[상품구분]"            => "pro_div_nm",
            
            //  LOAN_APP_EXTRA
            "[실거주도로명주소]"    => "addr1",
            "[실거주지번주소]"      => "old_addr1",
            "[오늘년월일]"          => "today_8",
            

            "[(ct)br_nm]"           => "br_nm",
            "[지점대표번호]"        => "branch_ph",
            "[대부업등록번호]"      => "branch_cust_ssn",
            "[지점팩스번호]"        => "branch_fax",
            "[(ct)bizr_no]"         => "bizr_no",
            "[지점주소]"            => "branch_addr",
            "[상호]"                => "br_nm",
            "[관리지점]"            => "branch_nm",
            "[지점장명]"            => "branch_ceo_name",
            "[사업자등록번호]"      => "branch_ssn",
            "[사업자등록번호1]"     => "branch_ssn1",
            "[사업자등록번호2]"     => "branch_ssn2",
            "[사업자등록번호3]"     => "branch_ssn3",
            
            "[가상계좌번호]"        => "vir_acct_ssn",              //  심사단계에서 아직 작업이 안된듯
            "[가상모계좌은행명]"    => "mo_acct_bank_nm",       //  심사단계에서 아직 작업이 안된듯
            "[가상모계좌번호]"      => "mo_acct_ssn",           //  심사단계에서 아직 작업이 안된듯

            "[보증인]"              => "g_name",
            "[보증인휴대폰]"        => "g_ph2",
            "[보증인생년]"          => "g_birth_year",
            "[보증인생월]"          => "g_birth_month",
            "[보증인생일]"          => "g_birth_date",
            "[보증인집전화]"        => "g_ph1",
            "[보증인실거주도로명주소]"  => "g_addr1",
            "[보증인주민번호앞]"    => "g_ssn_1",
            "[보증인주민번호뒤]"    => "g_ssn_2",

            // "[중도상환수수료-문구]" => "mdw_rpt_fee_rt_msg",
            // "[조기상환조건]"        => "mdw_rpt_msg",
            // "[조기상환안내문구]"    => "mdw_rpt_total_msg",

            "[bk_nm]"               => "bk_nm",
            "[bk_sur_nm]"           => "bk_usr_nm",


            "[빈칸]"                => "_BLANK",

            "[바코드]"              => "barcode_num",
        );

        $v = DB::TABLE("loan_app")
                    ->LEFTJOIN("loan_app_extra", "loan_app.no", "=", "loan_app_extra.loan_app_no")
                    ->SELECT("loan_app.no as loan_app_no", "loan_app.name", "loan_app.ssn", "loan_app.loan_rate", "loan_app.loan_delay_rate", "loan_app.return_fee_rate", "loan_app.app_date", "loan_app.contract_end_date", "loan_app.manager_code", "loan_app.loan_bank_ssn" ,"loan_app.limit_money", "loan_app.loan_money", "loan_app.loan_term")
                    ->ADDSELECT("loan_app.contract_day", "loan_app.status", "loan_app.cust_info_no", "loan_app.loan_info_no", "loan_app.contract_date", "loan_app.return_method_cd", "loan_app.pro_cd")
                    ->ADDSELECT("loan_app_extra.addr11", "loan_app_extra.addr12", "loan_app_extra.old_addr11", "loan_app_extra.ph11", "loan_app_extra.ph12", "loan_app_extra.ph13", "loan_app_extra.ph21", "loan_app_extra.ph22", "loan_app_extra.ph23")
                    ->WHERE("loan_app.save_status","Y")
                    ->WHERE("loan_app.no", $loan_app_no)
                    ->FIRST();


        if( !empty($v) )
        {
            if( !empty($v->manager_code) )
            {
                $branchArr = DB::TABLE("branch")->SELECT("*")->WHERE('save_status','Y')->WHERE("code", $v->manager_code)->first();
            }

            //보증인
            $guarantor = DB::TABLE("loan_app_guarantor")->SELECT("*")->WHERE('save_status','Y')->WHERE("loan_app_no", $v->loan_app_no)->ORDERBY("save_time", "desc")->first();
            
            //  가상계좌
            $vir_v = DB::TABLE("vir_acct")->SELECT("bank_cd", "mo_ssn", "vir_acct_ssn")->WHERE("save_status", "Y")->WHERE("loan_app_no", $v->loan_app_no)->ORDERBY("save_time", "desc")->first();

            //  UPS 에서는 바코드를 대출 건만 뽑는다.
            if( in_array($title, $this->barcode_number) && $v->status == "Y" )
            {
                $barcode_num = $title."0101_".$v->cust_info_no."_".$v->loan_info_no;
            }
            $today_8 = date("Ymd");

            $_BLANK                    = "";
            $name                      = $v->name;
            $birth_year                = Func::ssntoyears($v->ssn);
            $birth_month               = substr($v->ssn, 2, 2);
            $birth_date                = substr($v->ssn, 4, 2);
            $birthday                  = $birth_year."-".$birth_month."-".$birth_date;
            $ssn_1                     = substr($v->ssn, 0, 6);
            $ssn_2                     = substr($v->ssn, 6);
            $ssn_2_2                   = substr($v->ssn, 6, 1)."******";
            $addr1                     = $v->addr11." ".$v->addr12;
            $old_addr1                 = $v->old_addr11." ".$v->addr12;
            $ph11                      = $v->ph11;
            $ph12                      = $v->ph12;
            $ph13                      = $v->ph13;
            $ph_home                   = $ph11."-".$ph12."-".$ph13;
            $ph21                      = $v->ph21;
            $ph22                      = $v->ph22;
            $ph23                      = $v->ph23;
            $ph_tel                    = $ph21."-".$ph22."-".$ph23;
            $mdw_rpt_fee_rt            = Func::nvl($configArr['return_fee_rate'][$v->return_fee_rate], $v->return_fee_rate);
            $mdw_rpt_fee_rt_msg        = isset($v->return_fee_rate)?'중도상환수수료(      '.$mdw_rpt_fee_rt.'      ) 부과':'';
            $app_date                  = isset($v->app_date) ? Func::dateFormat($v->app_date) : "";
            $br_nm                     = "주식회사 ".config('app.company');
            $bizr_no                   = "213-81-03413";
            $limit_money               = $v->loan_money;
            $limit_money_kor           = Func::numberToKor($limit_money);
            $loan_money                = $v->loan_money;
            $loan_money_kor            = Func::numberToKor($v->loan_money);
            $contract_date             = Func::dateFormat($v->app_date);               //  승인일로 함 2021 07 28
            $contract_date_kor         = Func::dateFormat($v->app_date, "kor");
            $v->loan_term              = empty($v->loan_term) ? '0' : $v->loan_term;
            $contract_end_date         = Loan::addMonth($v->app_date, $v->loan_term);
            $contract_end_date_kor     = Func::dateFormat($contract_end_date, "kor");
            $contract_day              = $v->contract_day;
            $loan_rate                 = number_format($v->loan_rate ,2);
            $loan_delay_rate           = number_format($v->loan_delay_rate, 2);
            $loan_rate_month           = floor(($v->loan_rate / 12 * 100))/100;
            $loan_delay_rate_month     = floor(($v->loan_delay_rate / 12 * 100))/100;
            $loan_rate_per             = number_format($v->loan_rate,2)." %";
            $loan_delay_rate_per       = number_format($v->loan_delay_rate,2)." %";
            $loan_rate_month_per       = $loan_rate_month." %";
            $loan_delay_rate_month_per = $loan_delay_rate_month." %";
            $return_fee                = Func::nvl($configArr['return_fee_rate'][$v->return_fee_rate], $v->return_fee_rate);
            $first_loan_money          = isset($v->loan_money)?number_format($v->loan_money):'';
            $first_loan_money_kor      = Func::numberToKor($v->loan_money);
            $loan_term                 = $v->loan_term;
            $loan_bank_ssn             = $v->loan_bank_ssn;
            $return_method_cd          = !empty($v->return_method_cd) ? $configArr['return_method'][$v->return_method_cd]."상환" : "";

            
            if( substr($v->ssn,6,1) == "9" || substr($v->ssn,6,1) == "1" || substr($v->ssn,6,1) == "3" || substr($v->ssn,6,1) == "5" || substr($v->ssn,6,1) == "7" )
            {
                $gender = "남자";
            }
            else
            {
                $gender = "여자";
            }
            
            if( !empty($vir_v) )
            {
                $vir_acct_ssn        = $vir_v->vir_acct_ssn;
                $mo_acct_bank_nm = Func::nvl($configArr['bank_cd'][$vir_v->bank_cd], $vir_v->bank_cd);
                $mo_acct_ssn     = $vir_v->mo_ssn;
            }
            else
            {
                $vir_acct_ssn        = '';
                $mo_acct_bank_nm = '';
                $mo_acct_ssn     = '';
            }

            $bk_nm = '신한';
            $bk_usr_nm = config('app.company');

            // $mdw_rpt_fee_rt_msg = empty($v->return_fee_rate)?'법정상한금리와 약정금리 차이만큼의 이자차액이 중도상환수수료로 부과':'중도상환수수료(            )% 부과';
            // $mdw_rpt_msg = empty($v->return_fee_rate)?'대상고객은 12개월 이내 원금상환(일부상환포함)시 대출사용기간에 대한':'대상고객은 12개월 이내 완납 시';
            // $mdw_rpt_total_msg = empty($v->return_fee_rate)?'일부 대상고객은 12개월 이내 원금상환(일부상환포함)시 대출사용기간에 대한 법정상한금리와 약정금리 차이만큼의 이자차액이 중도상환수수료로 부과될 수 있습니다.':'대상고객은 12개월 이내 완납 시  중도상환수수료(  '.$v->return_fee_rate.'  )% 부과될 수 있습니다.';

            if( !empty($branchArr) )
            {
                $cust_reg_ssn    = Func::nvl($branchArr->cust_reg_ssn, '');
                $branch_fax      = Func::fullPhFormat($branchArr->fax);
                $branch_nm       = Func::nvl($branchArr->branch_name, "");
                $branch_addr     = Func::nvl($branchArr->addr11, '').Func::nvl($branchArr->addr12, '');
                $branch_zip      = Func::nvl($branchArr->zip, '');
                $branch_ph       = Func::fullPhFormat($branchArr->phone);
                $branch_ssn      = Func::nvl($branchArr->com_ssn, '');
                $branch_cust_ssn = Func::nvl($branchArr->cust_reg_ssn, '');

                if( !empty($branchArr->ceo_name) )
                {
                    $branch_ceo_name = isset($userArr[$branchArr->ceo_name]->name) ? $userArr[$branchArr->ceo_name]->name : $branchArr->ceo_name;
                }
    
                $branch_ssn1 = substr($branch_ssn, 0, 3);
                $branch_ssn2 = substr($branch_ssn, 3, 2);
                $branch_ssn3 = substr($branch_ssn, 5, 5);
            }

            if( !empty($guarantor) )
            {
                $g_name = Func::nvl($guarantor->name, '해당사항없음');
                $g_ph11 = Func::nvl($guarantor->ph11, '');
                $g_ph12 = Func::nvl($guarantor->ph12, '');
                $g_ph13 = Func::nvl($guarantor->ph13, '');
                $g_ph1  = $g_ph11.(!empty($g_ph12)?"-".$g_ph12:"").(!empty($g_ph13)?"-".$g_ph13:"");

                $g_ph21 = Func::nvl($guarantor->ph21, '');
                $g_ph22 = Func::nvl($guarantor->ph22, '');
                $g_ph23 = Func::nvl($guarantor->ph23, '');
                $g_ph2  = $g_ph21.(!empty($g_ph22)?"-".$g_ph22:"").(!empty($g_ph23)?"-".$g_ph23:"");

                $g_ssn = Func::nvl($guarantor->ssn, '');
                if(isset($g_ssn))
                {
                    $g_birth_year  = Func::ssntoyears($g_ssn);
                    $g_birth_month = substr($g_ssn, 2, 2);
                    $g_birth_date  = substr($g_ssn, 4, 2);
                    $g_ssn_1       = substr($g_ssn, 0, 6);
                    $g_ssn_2       = substr($g_ssn, 6);
                    $g_ssn_2_2     = substr($g_ssn, 6, 1)."******";
                    $g_ssn         = $g_ssn_1."-".$g_ssn_2;
                }
                else
                {
                    $g_birth_year  = '';
                    $g_birth_month = '';
                    $g_birth_date  = '';
                    $g_ssn_1       = '';
                    $g_ssn_2       = '';
                    $g_ssn_2_2     ='';
                    $g_ssn         = '';
                }

                $g_addr11 = Func::nvl($guarantor->addr11, '');
                $g_addr12 = Func::nvl($guarantor->addr12, '');

                $g_addr1 = $g_addr11." ".$g_addr12;
            }
        }

        foreach( $array_parse_string as $key => $value )
        {
            $value2 = !empty(${$value})?${$value}:'';

            foreach( $dataArray as $k => $val )
            {
		        $dataArray[$k] = str_replace($key, $value2, $val);
            }
        }

        return $dataArray;
    }

    private function p1001071($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = [
            "[CMS은행명]"           =>  "cms_bank_nm",
            "[CMS계좌번호]"         =>  "cms_bank_ssn",

            "[(거래)거래일자]"      =>  "trade_date",
            "[(거래)기산일자]"      =>  "trade_date",
            "[(거래)지급금액]"      =>  "trade_out_money",
            "[(거래)영수금액]"      =>  "trade_in_money",
            "[(거래)실수령이자]"    =>  "return_interest_sum",
            "[(거래)실수령원금]"    =>  "return_origin",
            "[(거래)대출잔액]"      =>  "balance",

        ];

        $bank_cd_conf = Func::getConfigArr('bank_cd');

        $_cms = DB::TABLE("cms_bank")->SELECT("cms_bank_code", "cms_account")->WHERE("loan_info_no", $loan_info_no)->WHERE("save_status", "Y")->WHERE("cms_reg_flag", "!=", "99")->ORDERBY("save_time", "desc")->FIRST();

        if( !empty($_cms) )
        {
            $cms_bank_nm = Func::nvl(  $bank_cd_conf[$_cms->cms_bank_code], ''  );
            $cms_bank_ssn = $_cms->cms_account;
        }
        // 변경
        foreach( $array_parse_string as $key => $value )
        {
            $value2 = Func::nvl( ${$value}, '' );
            $dataArray['1001071_01'] = str_replace($key, $value2, $dataArray['1001071_01']);
        }


        $_trade = DB::TABLE("loan_info_trade")->SELECT("trade_date, trade_money, trade_div, return_interest_sum, return_origin, return_cost_money, balance")
                    ->WHERE("loan_info_no", $loan_info_no)->WHERE("save_status", "Y")->WHERE("trade_div", "!=", "C")        //  비용은 제외
                    ->ORDERBY("save_time", "desc")->GET();

        $firstflag = true;
        $String = $dataArray['1001071_03'];
        foreach( $_trade as $t )
        {
            $trade_date      = Func::dateFormat($t->trade_date);
            $trade_out_money = '0';
            $trade_in_money  = '0';

            if( $t->trade_div == "I" )
            {
                $trade_in_money = number_format($t->trade_money);
            }
            else
            {
                $trade_out_money = number_format($t->trade_money);
            }

            $return_interest_sum = number_format($t->return_interest_sum);
            $return_origin       = number_format($t->return_origin - $t->return_cost_money);
            $balance             = number_format($t->balance);
            
            $String2 = $String;
            // 변경
            foreach( $array_parse_string as $key => $value )
            {
                $value2 = Func::nvl( ${$value}, '' );
                $String2 = str_replace($key, $value2, $String2);
            }

            if( $firstflag ) $dataArray['1001071_03'] = $String2;
            else             $dataArray['1001071_03'] .= $String2;

            $firstflag = false;
        }


        return $dataArray;



    }



    private function p1001058($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }


        $cinfo = DB::TABLE("LOAN_INFO LI")
                    ->JOIN("CUST_INFO CI", "LI.CUST_INFO_NO", "=", "CI.NO")
                    ->SELECT("CI.NO, CI.SSN, LI.LOAN_APP_NO")
                    ->WHERE("LI.NO", $loan_info_no)->FIRST();

        $cust_info_no = $cinfo->no;
        $ssn = substr($cinfo->ssn, 0, 6)."-".substr($cinfo->ssn, 6, 1);


        $array_parse_string = [
            '[1차심사결과]'               =>  'app_status_cd_nm',

            '[(전화이력)주민번호]'        =>  'ssn',
            '[(전화이력)통신사]'          =>  'tel_div',
            '[(전화이력)휴대폰]'          =>  'tel_no',
            '[(전화이력)저장자]'          =>  'save_nm',
            '[(전화이력)저장일시]'        =>  'save_date',


            '[(주소이력)주민번호]'        =>  'ssn',
            '[(주소이력)주소구분]'        =>  'addr_div',
            '[(주소이력)우편번호]'        =>  'zip',
            '[(주소이력)기본주소]'        =>  'addr1',
            '[(주소이력)상세주소]'        =>  'addr2',
            '[(주소이력)저장자]'          =>  'save_nm',
            '[(주소이력)저장일시]'        =>  'save_date',


            '[(직장이력)주민번호]'        =>  'ssn',
            '[(직장이력)직장명]'          =>  'com_name',
            '[(직장이력)직업]'            =>  'job_nm',
            '[(직장이력)급여일]'          =>  'pay_day',
            '[(직장이력)직장-부서]'       =>  'com_part',
            '[(직장이력)고용형태]'        =>  'com_employ_nm',
            '[(직장이력)근무기간]'        =>  'com_term',
            '[(직장이력)저장자]'          =>  'save_nm',
            '[(직장이력)저장일시]'        =>  'save_date',
        ];

        $configArr = Func::getConfigArr();
        $userArr = Func::getUserList();

        $_la = DB::TABLE("LOAN_APP")->SELECT("APP_STATUS_CD")->WHERE("NO", $cinfo->loan_app_no)->first();

        if( substr($_la->app_status_cd,0,1) == "F" )
        {
            $app_status_cd_nm = $configArr['app_status_cd'][$_la->app_status_cd];
        }
        else
        {
            $app_status_cd_nm = "적격";
        }

        $dataArray['1001058_01'] = str_replace("[1차심사결과]", $app_status_cd_nm, $dataArray['1001058_01']);

        $phQuery = DB::TABLE("CUST_INFO_LOG CIL")
                ->SELECT("CIL.PH11","CIL.PH12","CIL.PH13","CIL.PH21","CIL.PH22","CIL.PH23","CIL.PH31","CIL.PH32","CIL.PH33","CIL.PH41","CIL.PH42","CIL.PH43", "CIL.SAVE_ID", "CIL.SAVE_TIME")
                ->WHERE("CIL.CUST_INFO_NO", $cust_info_no)
                ->WHERE(function($query){
                    $query 
                    ->WHERE("VALUE(CIL.PH11,'')", "!=", '')->ORWHERE("VALUE(CIL.PH12,'')", "!=", '')->ORWHERE("VALUE(CIL.PH13,'')", "!=", '')
                    ->ORWHERE("VALUE(CIL.PH21,'')", "!=", '')->ORWHERE("VALUE(CIL.PH22,'')", "!=", '')->ORWHERE("VALUE(CIL.PH23,'')", "!=", '')
                    ->ORWHERE("VALUE(CIL.PH31,'')", "!=", '')->ORWHERE("VALUE(CIL.PH32,'')", "!=", '')->ORWHERE("VALUE(CIL.PH33,'')", "!=", '')
                    ->ORWHERE("VALUE(CIL.PH41,'')", "!=", '')->ORWHERE("VALUE(CIL.PH42,'')", "!=", '')->ORWHERE("VALUE(CIL.PH43,'')", "!=", '');
                    // ->ORWHERE("value(cil.ph51,'')", "!=", '')->ORWHERE("value(cil.ph52,'')", "!=", '')->ORWHERE("value(cil.ph53,'')", "!=", '');
                    })
                ->ORDERBY("CIL.SAVE_TIME", "DESC")->GET();


        $String = $dataArray['1001058_02'];
        $firstflag = true;

        foreach($phQuery as $ph)
        {

            if( !empty($ph->ph11) || !empty($ph->ph12) || !empty($ph->ph13) )
            {
                $tel_div   = "자택";
                $tel_no    = $ph->ph11."-".$ph->ph12."-".$ph->ph13;
                $save_nm   = isset($ph->save_id) ? (!empty($userArr[$ph->save_id]->name) ? $userArr[$ph->save_id]->name : $ph->save_id) : '';
                $save_date = Func::dateFormat(substr($ph->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_02'] = $String2;
                else             $dataArray['1001058_02'] .= $String2;
    
                $firstflag = false;
            }

            if( !empty($ph->ph21) || !empty($ph->ph22) || !empty($ph->ph23) )
            {
                $tel_div   = "휴대폰";
                $tel_no    = $ph->ph21."-".$ph->ph22."-".$ph->ph23;
                $save_nm   = isset($ph->save_id) ? (!empty($userArr[$ph->save_id]->name) ? $userArr[$ph->save_id]->name : $ph->save_id) : '';
                $save_date = Func::dateFormat(substr($ph->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_02'] = $String2;
                else             $dataArray['1001058_02'] .= $String2;
    
                $firstflag = false;
            }
            
            if( !empty($ph->ph31) || !empty($ph->ph32) || !empty($ph->ph33) )
            {
                $tel_div   = "직장";
                $tel_no    = $ph->ph31."-".$ph->ph32."-".$ph->ph33;
                $save_nm   = isset($ph->save_id) ? (!empty($userArr[$ph->save_id]->name) ? $userArr[$ph->save_id]->name : $ph->save_id) : '';
                $save_date = Func::dateFormat(substr($ph->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_02'] = $String2;
                else             $dataArray['1001058_02'] .= $String2;
    
                $firstflag = false;
            }
            
            if( !empty($ph->ph41) || !empty($ph->ph42) || !empty($ph->ph43) )
            {
                $tel_div   = "기타";
                $tel_no    = $ph->ph41."-".$ph->ph42."-".$ph->ph43;
                $save_nm   = isset($ph->save_id) ? (!empty($userArr[$ph->save_id]->name) ? $userArr[$ph->save_id]->name : $ph->save_id) : '';
                $save_date = Func::dateFormat(substr($ph->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_02'] = $String2;
                else             $dataArray['1001058_02'] .= $String2;
    
                $firstflag = false;
            }

            // if( !empty($ph->ph51) || !empty($ph->ph52) || !empty($ph->ph53) )
            // {
            //     $tel_div = "팩스";
            //     $tel_no = $ph->ph51."-".$ph->ph52."-".$ph->ph53;
            //     $save_nm = isset($ph->save_id) ? (!empty($userArr[$ph->save_id]->name) ? $userArr[$ph->save_id]->name : $ph->save_id) : '';
            //     $save_date = Func::dateFormat(substr($ph->save_time, 0, 8));

            //     $String2 = $String;
            //     // 변경
            //     foreach( $array_parse_string as $key => $value )
            //     {
            //         $value2 = Func::nvl( ${$value}, '' );
            //         $String2 = str_replace($key, $value2, $String2);
            //     }

            //     if( $firstflag ) $dataArray['1001058_02'] = $String2;
            //     else             $dataArray['1001058_02'] .= $String2;
    
            //     $firstflag = false;
            // }
        }

        $addrQuery = DB::TABLE("CUST_INFO_LOG CIL")
                ->SELECT("CIL.ZIP1", "CIL.ADDR11", "CIL.ADDR12","CIL.ZIP2", "CIL.ADDR21", "CIL.ADDR22","CIL.ZIP3", "CIL.ADDR31", "CIL.ADDR32","CIL.ZIP4", "CIL.ADDR41", "CIL.ADDR42", "CIL.SAVE_ID", "CIL.SAVE_TIME")
                ->WHERE("CIL.CUST_INFO_NO", $cust_info_no)
                ->WHERE(function($query){
                    $query 
                    ->WHERE("VALUE(CIL.ZIP1,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR11,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR12,'')", "!=", '')
                    ->ORWHERE("VALUE(CIL.ZIP2,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR21,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR22,'')", "!=", '')
                    ->ORWHERE("VALUE(CIL.ZIP3,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR31,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR32,'')", "!=", '')
                    ->ORWHERE("VALUE(CIL.ZIP4,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR41,'')", "!=", '')->ORWHERE("VALUE(CIL.ADDR42,'')", "!=", '');
                    })
                ->ORDERBY("CIL.SAVE_TIME", "DESC")->GET();

        $String = $dataArray['1001058_03'];
        $firstflag = true;

        foreach($addrQuery as $addr)
        {
            if( !empty($addr->zip1) || !empty($addr->addr11) || !empty($addr->addr12) )
            {

                $addr_div  = "거주지";
                $zip       = $addr->zip1;
                $addr1     = $addr->addr11;
                $addr2     = $addr->addr12;
                $save_nm   = isset($addr->save_id) ? (!empty($userArr[$addr->save_id]->name) ? $userArr[$addr->save_id]->name : $addr->save_id) : '';
                $save_date = Func::dateFormat(substr($addr->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2  = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_03'] = $String2;
                else             $dataArray['1001058_03'] .= $String2;
    
                $firstflag = false;
            }

            if( !empty($addr->zip2) || !empty($addr->addr21) || !empty($addr->addr22) )
            {
                $addr_div  = "등본";
                $zip       = $addr->zip2;
                $addr1     = $addr->addr21;
                $addr2     = $addr->addr22;
                $save_nm   = isset($addr->save_id) ? (!empty($userArr[$addr->save_id]->name) ? $userArr[$addr->save_id]->name : $addr->save_id) : '';
                $save_date = Func::dateFormat(substr($addr->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_03'] = $String2;
                else             $dataArray['1001058_03'] .= $String2;
    
                $firstflag = false;
            }

            if( !empty($addr->zip3) || !empty($addr->addr31) || !empty($addr->addr32) )
            {
                $addr_div  = "직장";
                $zip       = $addr->zip3;
                $addr1     = $addr->addr31;
                $addr2     = $addr->addr32;
                $save_nm   = isset($addr->save_id) ? (!empty($userArr[$addr->save_id]->name) ? $userArr[$addr->save_id]->name : $addr->save_id) : '';
                $save_date = Func::dateFormat(substr($addr->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_03'] = $String2;
                else             $dataArray['1001058_03'] .= $String2;
    
                $firstflag = false;
            }

            if( !empty($addr->zip4) || !empty($addr->addr41) || !empty($addr->addr42) )
            {
                $addr_div  = "기타";
                $zip       = $addr->zip4;
                $addr1     = $addr->addr41;
                $addr2     = $addr->addr42;
                $save_nm   = isset($addr->save_id) ? (!empty($userArr[$addr->save_id]->name) ? $userArr[$addr->save_id]->name : $addr->save_id) : '';
                $save_date = Func::dateFormat(substr($addr->save_time, 0, 8));

                $String2 = $String;
                // 변경
                foreach( $array_parse_string as $key => $value )
                {
                    $value2 = Func::nvl( ${$value}, '' );
                    $String2 = str_replace($key, $value2, $String2);
                }

                if( $firstflag ) $dataArray['1001058_03'] = $String2;
                else             $dataArray['1001058_03'] .= $String2;
    
                $firstflag = false;
            }
        }

        $comQuery = DB::TABLE("CUST_INFO_LOG CIL")
                ->SELECT("CIL.COM_NAME","CIL.JOB_CD","CIL.PAY_DAY","CIL.COM_PART","CIL.COM_EMPLOY_CD","CIL.COM_YEAR","CIL.COM_MONTHS","CIL.SAVE_TIME","CIL.SAVE_ID")
                ->WHERE("CIL.CUST_INFO_NO", $cust_info_no)
                ->WHERE(function($query){
                    $query -> WHERE("VALUE(CIL.COM_NAME,'')", "!=", '')
                        ->ORWHERE("VALUE(CIL.JOB_CD,'')", "!=", '')
                        ->ORWHERE("VALUE(CIL.PAY_DAY,'')", "!=", '')
                        ->ORWHERE("VALUE(CIL.COM_PART,'')", "!=", '')
                        ->ORWHERE("VALUE(CIL.COM_EMPLOY_CD,'')", "!=", '')
                        ->ORWHERE("VALUE(CIL.COM_YEAR,'')", "!=", '')
                        ->ORWHERE("VALUE(CIL.COM_MONTHS,'')", "!=", '');
                    })
                ->ORDERBY("CIL.SAVE_TIME", "DESC")->GET();

        $String = $dataArray['1001058_04'];
        $firstflag = true;
        $arrJobCd = Func::getJobCd();

        foreach($comQuery as $com)
        {
            $com_name      = $com->com_name;
            $job_nm        = Func::nvl($arrJobCd[$com->job_cd], $com->job_cd);
            $pay_day       = $com->pay_day;
            $com_part      = $com->com_part;
            $com_employ_nm = Func::nvl($configArr['employ_cd'][$com->com_employ_cd], $com->com_employ_cd);
            $com_term      = (!empty($com->com_year)?$com->com_year."년":"")." ".(!empty($com->com_months)?$com->com_months."개월":"");
            $save_nm       = isset($com->save_id) ? (!empty($userArr[$com->save_id]->name) ? $userArr[$com->save_id]->name : $com->save_id) : '';
            $save_date     = Func::dateFormat(substr($com->save_time, 0, 8));

            $String2 = $String;
            // 변경
            foreach( $array_parse_string as $key => $value )
            {
                $value2  = Func::nvl( ${$value}, '' );
                $String2 = str_replace($key, $value2, $String2);
            }

            if( $firstflag ) $dataArray['1001058_04'] = $String2;
            else             $dataArray['1001058_04'] .= $String2;

            $firstflag = false;
        }

        
        // 변경
        foreach( $array_parse_string as $key => $value )
        {
            $value2 = "";
            $dataArray['1001058_02'] = str_replace($key, $value2, $dataArray['1001058_02']);
            $dataArray['1001058_03'] = str_replace($key, $value2, $dataArray['1001058_03']);
            $dataArray['1001058_04'] = str_replace($key, $value2, $dataArray['1001058_04']);
        }

        return $dataArray;
    }

    private function p1001031($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $cust = DB::TABLE("LOAN_INFO")->SELECT("CUST_INFO_NO")->WHERE("NO", $loan_info_no)->first();

        $cust_info_no = $cust->cust_info_no;

        $array_parse_string = [
            '[계약번호]'        =>  'lno',
            '[고객명]'          =>  'name',
            '[계약일]'          =>  'contract_date',
            '[대출액]'          =>  'loan_money',
            '[잔액]'            =>  'balance',
            '[계좌상태]'        =>  'status',
            '[최종입금일]'      =>  'last_in_date',
            '[약정일]'          =>  'contract_day',
            '[상환일]'          =>  'return_date',
            '[연체일수]'        =>  'delay_term',
            '[입금약속일]'      =>  'promise_ymdhi',
            '[집중고객여부]'    =>  'attribute_manage_cd_nm',
            '[상품구분]'          =>  'pro_nm',
            '[연체사유]'        =>  'attribute_delay_cd_nm',
            '[빈칸]'            =>  '_blank',

        ];

        $configArr = Func::getConfigArr();
        $getProCode = Func::getConfigArr('pro_cd');

        $query = DB::TABLE("loan_info")
                ->LEFTJOIN("cust_info", "loan_info.cust_info_no", "=", "cust_info.no")
                ->SELECT("loan_info.no as loan_info_no", "cust_info.name", "loan_info.contract_date", "loan_info.loan_money", "loan_info.balance", "loan_info.status", "loan_info.last_in_date", "loan_info.contract_day", "loan_info.return_date", "loan_info.delay_term", "cust_info.attribute_manage_cd", "loan_info.pro_cd", "cust_info.attribute_delay_cd", "loan_info.promise_date", "loan_info.promise_hour", "loan_info.promise_min")
                ->WHERE("loan_info.cust_info_no", $cust_info_no)
                ->WHERE("loan_info.save_status", "Y")->get();

        $String = $dataArray['1001031_01'];
        $firstflag = true;

        foreach($query as $v)
        {
            $lno                    = $v->loan_info_no;
            $name                   = $v->name;
            $contract_date          = Func::dateFormat($v->contract_date);
            $loan_money             = $v->loan_money;
            $balance                = $v->balance;
            $status                 = Vars::$arrayContractSta[$v->status];
            $last_in_date           = Func::dateFormat($v->last_in_date);
            $contract_day           = $v->contract_day;
            $return_date            = Func::dateFormat($v->return_date);
            $delay_term             = $v->delay_term;
            $attribute_manage_cd_nm = Func::nvl($configArr['manage_rsn_cd'][$v->attribute_manage_cd], $v->attribute_manage_cd);
            $pro_nm                 = Func::nvl($getProCode[$v->pro_cd],$v->pro_cd);
            
            $promise_ymdhi = "";
            if( !empty($v->promise_date) )
            {
                $promise_ymdhis = $v->promise_date.(!empty($v->promise_hour)?$v->promise_hour:"00").(!empty($v->promise_min)?$v->promise_min:"00")."00";

                if( $promise_ymdhis > date("YmdHis") )
                {
                    $promise_ymdhi = Func::dateFormat($v->promise_date)." ".(!empty($v->promise_hour)?$v->promise_hour:"00").":".(!empty($v->promise_min)?$v->promise_min:"00");
                }
                else
                {
                    $promise_ymdhi = "";
                }
            }
            
            $attribute_delay_cd_nm = "";
            if( !empty($v->attribute_cd_delay) )
            {
                $v->attribute_delay_cd = json_decode($v->attribute_delay_cd);

                foreach( $v->attribute_delay_cd as $idx => $attr_cd_delay )
                {
                    if( $idx == "0" )
                    {
                        $attribute_delay_cd_nm = Func::nvl($configArr['delay_rsn_cd'][$attr_cd_delay], $attr_cd_delay);
                    }
                    else
                    {
                        $attribute_delay_cd_nm = ", ".Func::nvl($configArr['delay_rsn_cd'][$attr_cd_delay], $attr_cd_delay);
                    }
                }
            }

            $_blank = "";

            $String2 = $String;
            // 변경
            foreach( $array_parse_string as $key => $value )
            {
                $value2 = Func::nvl( ${$value}, '' );

                $String2 = str_replace($key, $value2, $String2);
            }


            if( $firstflag )
            {
                $dataArray['1001031_01'] = $String2;
            }
            else
            {
                $dataArray['1001031_01'] .= $String2;
            }

            $firstflag = false;
        }

        return $dataArray;
    }

    private function p1001063($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = [
            '[(거래)거래구분]'          => "title",
            '[전번거래일]'              => "bf_trade_date",
            '[전번거래잔액]'            => "bf_balance",
            '[전번거래총부족금액]'      => "bf_lack_money_sum",      //  "lack_delay_interest", "lack_delay_money"
            '[이번거래일]'              => "last_trade_date",
            '[이번거래구분]'            => "last_trade_path_nm",
            '[이번거래금액1]'           => "last_trade_money",
            '[이번거래후잔액1]'         => "last_balance",
            '[이번거래후미수금1]'       => "last_misu_money",
            '[이번거래금액2]'           => "last_trade_money2",
            '[이번거래후잔액2]'         => "last_balance2",
            '[이번거래후부족금2]'       => "last_lack_money_sum",
            '[이번거래투자원금상환]'        => "last_return_origin",
            '[이번거래상환정상이자]'    => "last_return_interest",
            '[이번거래상환연체이자]'    => "last_return_delay_sum",
            '[이번거래상환가수금]'      => "last_over_money",
            '[이번거래상환비용]'        => "last_cost_money",
            "[증명발급수수료]"          => "last_issue_fee",

            '[상환계좌-문구]'           => "act_sect_nm",

        ];

        $configArr = Func::getConfigArr();

        $query = DB::TABLE("loan_info_trade")
                    ->SELECT("trade_date", "trade_money", "cost_money", "misu_money", "lack_delay_interest", "lack_delay_money", "trade_div", "trade_type", "trade_path_cd", "balance", "return_misu_money", "return_origin", "return_interest")
                    ->ADDSELECT("return_delay_interest", "return_delay_money", "over_money", "lack_interest", "return_lack_delay_interest", "return_lack_delay_money", "return_lack_interest")
                    ->WHERE("save_status", "Y")
                    ->WHERE("loan_info_no", $loan_info_no)
                    ->ORDERBY("save_time", "DESC")
                    ->LIMIT(2)->GET();

        $arr_trade_div = ["O" => "대출", "I" => "입금상환", "C" => "비용발생"];
        $act_sect_nm = "상환계좌";

        foreach($query as $idx => $v)
        {
            if( $idx == 0 )
            {
                if( $v->trade_div == "O" )      $title = Func::nvl($configArr['trade_out_type'][$v->trade_type], '');
                elseif( $v->trade_div == "I" )  $title = "원리금수납";
                else    $title = Func::nvl($configArr['trade_cost_type'][$v->trade_type], '');
                
                $last_trade_date    = $v->trade_date;
                $last_trade_path_nm = Func::nvl($configArr['trade_in_path'][$v->trade_path_cd], Func::nvl($configArr['trade_out_path'][$v->trade_path_cd], ''));
                $last_trade_div_nm  = Func::nvl($arr_trade_div[$v->trade_div], $v->trade_div);

                $last_trade_money      = "0";
                $last_balance          = "0";
                $last_misu_money       = "0";
                $last_trade_money2     = "0";
                $last_balance2         = "0";
                $last_lack_money_sum   = "0";
                $last_return_origin    = "0";
                $last_return_interest  = "0";
                $last_return_delay_sum = "0";
                $last_issue_fee        = "0";
                if( $v->trade_div      == "O" )
                {
                    $last_trade_money = $v->trade_money;
                    $last_balance     = $v->balance;
                    $last_misu_money  = $v->misu_money;
                }
                else if( $v->trade_div == "I" )
                {
                    $last_trade_money2     = $v->trade_money;
                    $last_balance2         = $v->balance;
                    $last_lack_money_sum   = $v->return_lack_delay_interest + $v->return_lack_delay_money + $v->return_lack_interest;
                    $last_return_origin    = $v->return_origin;
                    $last_return_interest  = $v->return_interest;
                    $last_return_delay_sum = $v->return_delay_interest + $v->return_delay_money;
                }

                $last_over_money = $v->over_money;
                $last_cost_money = $v->cost_money;
            }
            elseif( $idx == 1 )
            {
                $bf_trade_date     = $v->trade_date;
                $bf_balance        = $v->balance;
                $bf_lack_money_sum = $v->lack_delay_interest + $v->lack_delay_money + $v->lack_interest;
            }
        }

        foreach($array_parse_string as $key => $value)
        {
            $value2 = Func::nvl( ${$value}, '' );

            $dataArray['1001063_01'] = str_replace($key, $value2, $dataArray['1001063_01']);
        }

        return $dataArray;
    }
    
    /*
        채권자 계좌번호 신고서 (개인회생)
    */
    private function p1001041($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = [
            '[사건번호]'            => "law_event_no",
            '[채권자번호]'          => "creditor_no",
            '[개회-관할법원명]'     => "court_nm",
        ];

        $v = DB::   TABLE("loan_irl")
                    ->SELECT("law_event_no", "creditor_no", "law_justice")
                    ->WHERE("save_status", "Y")
                    ->WHERE("loan_info_no", $loan_info_no)
                    ->ORDERBY("save_time", "desc")
                    ->FIRST();

        $result = "";
        if(!empty($v))
        {
            $array_court_cd = Func::getConfigArr('court_cd');

            $loan_event_no = $v->loan_event_no;
            $creditor_no   = $v->creditor_no;
            $court_nm      = Func::nvl($array_court_cd[$v->law_justice],'');
        }

        // 변경
        foreach( $array_parse_string as $key => $value )
        {
            $value2                  = Func::nvl( ${$value}, '' );
            $dataArray['1001041_01'] = str_replace($key, $value2, $dataArray['1001041_01']);
        }

        return $dataArray;
    }

    /*
        고소/고발 통지서
    */
    private function p1003006($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = [
            '[관할법원명]'  => "court_nm",
        ];

        $v = DB::   TABLE("loan_info_law")
                    ->SELECT("court_cd")
                    ->WHERE("save_status", "Y")
                    ->WHERE("loan_info_no", $loan_info_no)
                    ->ORDERBY("save_time", "desc")
                    ->FIRST();

        $result = "";
        if(!empty($v))
        {
            $array_court_cd = Func::getConfigArr('court_cd');
            $court_nm       = Func::nvl($array_court_cd[$v->court_cd], "");
        }

        // 변경
        foreach( $array_parse_string as $key => $value )
        {
            $value2 = Func::nvl( ${$value}, '' );

            $dataArray['1003006_01'] = str_replace($key, $value2, $dataArray['1003006_01']);
        }

        return $dataArray;
    }


    /*
        고소/고발 통지서 2
    */
    private function p1003007($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = [
            '[관할법원명]'  => "court_nm",
        ];

        $v = DB::   TABLE("LOAN_INFO_LAW")
                    ->SELECT("COURT_CD")
                    ->WHERE("SAVE_STATUS", "Y")
                    ->WHERE("LOAN_INFO_NO", $loan_info_no)
                    ->ORDERBY("SAVE_TIME", "DESC")
                    ->FIRST();

        $result = "";
        if(!empty($v))
        {
            $array_court_cd = Func::getConfigArr('court_cd');

            $court_nm = Func::nvl($array_court_cd[$v->court_cd], "");
        }

        // 변경
        foreach( $array_parse_string as $key => $value )
        {
            $value2                  = Func::nvl( ${$value}, '' );
            $dataArray['1003007_01'] = str_replace($key, $value2, $dataArray['1003007_01']);
        }

        return $dataArray;
    }


    /*
        대출중개 경로 표시서
    */
    private function p1001064($dataArray, $_DATA)
    {
        $loan_app_no = $this->loan_app_no;
        if( !$loan_app_no )
        {
            return false;
        }

        $array_parse_string = [
            '[step_nm]'       => "agent_level",           //  구분 (차수)
            '[rcv_date]'      => "agent_app_date",        //  해당연월일 (접수연월일)
            '[company_nm]'    => "agent_name",            //  상호
            '[company_no]'    => "agent_ssn",             //  대부중개업등록번호
            '[associ_no]'     => "agent_assn",            //  협회 등록번호
            '[tel_no]'        => "agent_ph",              //  전화번호
        ];

        $queryResult = DB::TABLE("AGENT_LEVEL AL")
                        ->LEFTJOIN("AGENT A", "AL.AGENT_CD", "=", "A.CODE")
                        ->SELECT("AL.AGENT_LEVEL, AL.AGENT_APP_DATE, AL.AGENT_NAME, AL.AGENT_SSN, AL.AGENT_ASSN, A.PH11||'-'||A.PH12||'-'||A.PH13 AS AGENT_PH")
                        ->WHERE("AL.SAVE_STATUS", "Y")
                        ->WHERE("AL.LOAN_APP_NO", $loan_app_no)
                        ->ORDERBY("AL.AGENT_LEVEL","ASC")->get();

        $result = "";
        $firstflag = true;
        foreach($queryResult as $v)
        {
            $String = $dataArray['1001064_02'];

            $v->agent_level = $v->agent_level==1 ? "최초정보생산자" : ($v->agent_level-1)."차정보제공자";

            // 변경
            foreach( $array_parse_string as $key => $value )
            {
                $value2 = Func::nvl( $v->{$value}, '' );
                $String = str_replace($key, $value2, $String);
            }

            if( $firstflag )
            {
                $result = $String;
                $firstflag = false;
            }
            else
            {
                $result .= $String;
            }
        }

        $dataArray['1001064_02'] = $result;

        return $dataArray;
    }

    /*
        고객정보 적법수집 확인서
    */
    private function p1001065($dataArray, $_DATA)
    {
        $loan_app_no =$this->loan_app_no;
        if( !$loan_app_no )
        {
            return false;
        }

        $array_parse_string = [
            '[param1]'       => "param1",                   //  고객이 먼저 중개인에게 연락함
            '[param2]'       => "param2",                   //  인터넷광고-고객이직접신청
            '[param3]'       => "param3",                   //  인터넷광고-홈페이지 등 연락처 남김
            '[param4]'       => "param4",                   //  신문광고
            '[param5]'       => "param5",                   //  전단지광고
            '[param6]'       => "param6",                   //  방문신청
            '[param7]'       => "param7",                   //  기타 내용
            '[param30]'      => "param30",                  //  기타
            
            '[param16]'      => "param16",                  //  중개인이 먼저 고객에게 연락함
            '[param8]'       => "param8",                   //  제휴처제공
            '[param9]'       => "param9",                   //  기타 내용
            '[param10]'      => "param10",                  //  전화
            '[param11]'      => "param11",                  //  SMS
            '[param12]'      => "param12",                  //  E-mail
            '[param13]'      => "param13",                  //  우편물
            '[param14]'      => "param14",                  //  직접방문
            '[param15]'      => "param15",                  //  기타 내용
            '[param40]'      => "param40",                  //  기타

            '[info_get_date_1]'  => "info_get_date_1",      //  접수일자 (년)
            '[info_get_date_2]'  => "info_get_date_2",      //  접수일자 (월)
            '[info_get_date_3]'  => "info_get_date_3",      //  접수일자 (일)
            '[info_get_co_nm]'   => "info_get_co_nm",       //  회사명
            '[co_chief_nm]'      => "co_chief_nm",          //  대표자명
            '[co_manage_nm]'     => "co_manage_nm",         //  담당자명
        ];

        $v = DB::TABLE("LOAN_APP_EXTRA")
                ->SELECT("FST_AGENT_DIV", "FST_AGENT_CD", "FST_AGENT_ETC", "FST_AGENT_INFO_DATE", "FST_AGENT_COM", "FST_AGENT_CEO", "FST_AGENT_MANAGER" )
                ->WHERE("LOAN_APP_NO", $loan_app_no)->FIRST();

        if( !empty($v) )
        {
            $arr_agent_path2_cd = Func::getConfigArr('agent_path2_cd');

            $param1  = ($v -> fst_agent_div == "1")? "■" : "□";
            $param16 = ($v -> fst_agent_div == "2")? "■" : "□";

            if( !empty($v->fst_agent_info_date) )
            {
                $info_get_date_1 = substr($v->fst_agent_info_date, 0, 4);
                $info_get_date_2 = substr($v->fst_agent_info_date, 4, 2);
                $info_get_date_3 = substr($v->fst_agent_info_date, 6, 2);
            }
            else
            {
                $info_get_date_1 = $info_get_date_2 = $info_get_date_3 = "";
            }

            $info_get_co_nm = $v->fst_agent_com;
            $co_chief_nm    = $v->fst_agent_ceo;
            $co_manage_nm   = $v->fst_agent_manager;

            foreach( $arr_agent_path2_cd as $code => $content )
            {
                if( $code == $v->fst_agent_cd )
                {
                    if( $code == "11" )
                        $param2 = "■ ".$content;
                    elseif( $code == "12" )
                        $param3 = "■ ".$content;
                    elseif( $code == "13" )
                        $param4 = "■ ".$content;
                    elseif( $code == "14" )
                        $param5 = "■ ".$content;
                    elseif( $code == "15" )
                        $param6 = "■ ".$content;
                    elseif( $code == "16" )
                    {
                        $param30 = "■ ";
                        $param7 = $v->fst_agent_etc;
                    }
                    elseif( $code == "21" )
                        $param8 = "■ ".$content;
                    elseif( $code == "22" )
                        $param9 = $v->fst_agent_etc;
                    elseif( $code == "23" )
                        $param10 = "■ ".$content;
                    elseif( $code == "24" )
                        $param11 = "■ ".$content;
                    elseif( $code == "25" )
                        $param12 = "■ ".$content;
                    elseif( $code == "26" )
                        $param13 = "■ ".$content;
                    elseif( $code == "27" )
                        $param14 = "■ ".$content;
                    elseif( $code == "28" )
                    {
                        $param40 = "■ ";
                        $param15 = $v->fst_agent_etc;
                    }
                }
                else
                {
                    if( $code == "11" )
                        $param2 = "□ ".$content;
                    elseif( $code == "12" )
                        $param3 = "□ ".$content;
                    elseif( $code == "13" )
                        $param4 = "□ ".$content;
                    elseif( $code == "14" )
                        $param5 = "□ ".$content;
                    elseif( $code == "15" )
                        $param6 = "□ ".$content;
                    elseif( $code == "16" )
                    {
                        $param30 = "□ ";
                        // $param7 = $v->fst_agent_etc;
                        $param7 = "";
                    }
                    elseif( $code == "21" )
                        $param8 = "□ ".$content;
                    elseif( $code == "22" )
                        // $param9 = $v->fst_agent_etc;
                        $param9 = "";
                    elseif( $code == "23" )
                        $param10 = "□ ".$content;
                    elseif( $code == "24" )
                        $param11 = "□ ".$content;
                    elseif( $code == "25" )
                        $param12 = "□ ".$content;
                    elseif( $code == "26" )
                        $param13 = "□ ".$content;
                    elseif( $code == "27" )
                        $param14 = "□ ".$content;
                    elseif( $code == "28" )
                    {
                        $param40 = "□ ";
                        $param15 = "";
                    }
                }
            }
        }

        // 변경
        foreach( $array_parse_string as $key => $value )
        {
            $value2 = Func::nvl( ${$value}, '' );

            $dataArray['1001065_01'] = str_replace($key, $value2, $dataArray['1001065_01']);
        }

        return $dataArray;
    }

    /*
        거래내역확인서
    */
    private function p1001035($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;
        if( !$loan_info_no )
        {
            return false;
        }

        $array_parse_string = [
            '[(거래)거래일]'      => 'trade_date',
            '[(거래)거래구분]'    => 'trade_path_nm',
            '[(거래)거래금액]'    => 'trade_money',
            '[(거래)정상이자일수]'=> 'interest_term',
            '[(거래)발생이자]'    => 'interest_sum',
            '[(거래)부족금]'      => 'lack_sum',
            '[(거래)원금상환액]'  => 'return_origin',
            '[(거래)거래후잔액]'  => 'balance',
        ];

        $query = DB::TABLE("LOAN_INFO_TRADE")
                        ->SELECT("TRADE_DATE", "TRADE_DIV", "TRADE_PATH_CD", "TRADE_MONEY", "INTEREST_TERM", "DELAY_TERM", "INTEREST", "DELAY_MONEY", "DELAY_INTEREST", "LACK_DELAY_INTEREST", "LACK_DELAY_MONEY", "LACK_INTEREST", "RETURN_ORIGIN", "BALANCE" )
                        ->WHERE("LOAN_INFO_NO", $loan_info_no)
                        ->WHERE("SAVE_STATUS", "Y")
                        ->ORDERBY("SAVE_TIME", "DESC")->GET();

        $arr_trade_div = ["O" => "대출", "I" => "입금상환", "C" => "비용발생"];
        $configArr = Func::getConfigArr();

        $String = [];
        $j = 0;
        $firstflag = true;
        foreach($query as $v)
        {
            $trade_date    = $v->trade_date;
            if( $v->trade_div == "O" )
            {
                $trade_path_nm = Func::nvl($configArr['trade_out_type'][$v->trade_path_cd], '');
            }
            elseif( $v->trade_div == "I" )
            {
                $trade_path_nm = "원리금수납";
            }
            else
            {
                $trade_path_nm = Func::nvl($configArr['trade_cost_type'][$v->trade_path_cd], '');
            }

            $trade_money   = Func::nvl($v->trade_money,'');
            $interest_term = $v->interest_term + $v->delay_term;
            $interest_sum  = $v->interest + $v->delay_money + $v->delay_interest;
            $lack_sum      = $v->lack_delay_interest + $v->lack_delay_money + $v->lack_interest;
            $return_origin = $v->return_origin;
            $balance       = $v->balance;

            
            // 변경
            $i = 0;
            foreach( $array_parse_string as $key => $value )
            {
                $value2 = Func::nvl( ${$value}, '' );
    
                if(!$i)
                {
                    $String[$j] = str_replace($key, $value2, $dataArray['1001035_02']);
                    $i = 1;
                }
                else
                {
                    $String[$j] = str_replace($key, $value2, $String[$j]);
                }

                
            }

            $j++;
        }

        $dataArray['1001035_02'] = implode("",$String);

        return $dataArray;
    }
    
    private function p1001032($dataArray, $_DATA)
    {
        $loan_info_no = $this->loan_info_no;

        $configArr = Func::getConfigArr();
        $userArr = Func::getUserList();

        $array_parse_string = [
            '[(법조치)구분]'                    => "law_type_nm",
            '[(법조치)관할법원]'                => "court_cd_nm",
            '[(법조치)사건번호연도]'            => "event_year",
            '[(법조치)사건번호]'                => "event_no",

            '[대손상각일자]'                    => "sanggak_date",
            '[대손상각금액]'                    => "sanggak_money",         //  상각잔액 + 상각시이자합계

            '[(회생1)등록일시]'                 => "I_save_time_date_1",
            '[(회생1)구분]'                     => "I_law_type_nm_1",
            '[(회생1)계약번호]'                 => "I_loan_info_no_1",
            '[(회생1)관할법원]'                 => "I_court_cd_nm_1",
            '[(회생1)확정일]'                   => "I_law_confirm_date_1",
            '[(회생1)접수일]'                   => "I_law_app_date_1",
            '[(회생1)사건번호]'                 => "I_event_no_1",
            '[(회생1)청구원금]'                 => "I_law_won_mny_1",

            '[(회생2)등록일시]'                 => "I_save_time_date_2",
            '[(회생2)구분]'                     => "I_law_type_nm_2",
            '[(회생2)계약번호]'                 => "I_loan_info_no_2",
            '[(회생2)관할법원]'                 => "I_court_cd_nm_2",
            '[(회생2)확정일]'                   => "I_law_confirm_date_2",
            '[(회생2)접수일]'                   => "I_law_app_date_2",
            '[(회생2)사건번호]'                 => "I_event_no_2",
            '[(회생2)청구원금]'                 => "I_law_won_mny_2",

            '[(회생3)등록일시]'                 => "I_save_time_date_3",
            '[(회생3)구분]'                     => "I_law_type_nm_3",
            '[(회생3)계약번호]'                 => "I_loan_info_no_3",
            '[(회생3)관할법원]'                 => "I_court_cd_nm_3",
            '[(회생3)확정일]'                   => "I_law_confirm_date_3",
            '[(회생3)접수일]'                   => "I_law_app_date_3",
            '[(회생3)사건번호]'                 => "I_event_no_3",
            '[(회생3)청구원금]'                 => "I_law_won_mny_3",

            '[(보전1)등록일시]'                 => "A_save_time_date_1",
            '[(보전1)구분]'                     => "A_law_type_nm_1",
            '[(보전1)계약번호]'                 => "A_loan_info_no_1",
            '[(보전1)관할법원]'                 => "A_court_cd_nm_1",
            '[(보전1)확정일]'                   => "A_law_confirm_date_1",
            '[(보전1)접수일]'                   => "A_law_app_date_1",
            '[(보전1)사건번호]'                 => "A_event_no_1",
            '[(보전1)청구원금]'                 => "A_law_won_mny_1",

            '[(보전2)등록일시]'                 => "A_save_time_date_2",
            '[(보전2)구분]'                     => "A_law_type_nm_2",
            '[(보전2)계약번호]'                 => "A_loan_info_no_2",
            '[(보전2)관할법원]'                 => "A_court_cd_nm_2",
            '[(보전2)확정일]'                   => "A_law_confirm_date_2",
            '[(보전2)접수일]'                   => "A_law_app_date_2",
            '[(보전2)사건번호]'                 => "A_event_no_2",
            '[(보전2)청구원금]'                 => "A_law_won_mny_2",

            '[(보전3)등록일시]'                 => "A_save_time_date_3",
            '[(보전3)구분]'                     => "A_law_type_nm_3",
            '[(보전3)계약번호]'                 => "A_loan_info_no_3",
            '[(보전3)관할법원]'                 => "A_court_cd_nm_3",
            '[(보전3)확정일]'                   => "A_law_confirm_date_3",
            '[(보전3)접수일]'                   => "A_law_app_date_3",
            '[(보전3)사건번호]'                 => "A_event_no_3",
            '[(보전3)청구원금]'                 => "A_law_won_mny_3",

            '[(메모1)등록일시]'                 => "M_save_time_date_1",
            '[(메모1)구분]'                     => "M_div_nm_1",
            '[(메모1)관계]'                     => "M_relation_cd_nm_1",
            '[(메모1)전화종류]'                 => "M_ph_cd_nm_1",
            '[(메모1)약속일시]'                 => "M_promise_date_1",
            '[(메모1)약속시분]'                 => "M_promise_time_1",
            '[(메모1)약속금액]'                 => "M_promise_money_1",
            '[(메모1)내용]'                     => "M_memo_1",
            '[(메모1)작업자]'                   => "M_save_id_nm_1",

            '[(메모2)등록일시]'                 => "M_save_time_date_2",
            '[(메모2)구분]'                     => "M_div_nm_2",
            '[(메모2)관계]'                     => "M_relation_cd_nm_2",
            '[(메모2)전화종류]'                 => "M_ph_cd_nm_2",
            '[(메모2)약속일시]'                 => "M_promise_date_2",
            '[(메모2)약속시분]'                 => "M_promise_time_2",
            '[(메모2)약속금액]'                 => "M_promise_money_2",
            '[(메모2)내용]'                     => "M_memo_2",
            '[(메모2)작업자]'                   => "M_save_id_nm_2",

            '[(메모3)등록일시]'                 => "M_save_time_date_3",
            '[(메모3)구분]'                     => "M_div_nm_3",
            '[(메모3)관계]'                     => "M_relation_cd_nm_3",
            '[(메모3)전화종류]'                 => "M_ph_cd_nm_3",
            '[(메모3)약속일시]'                 => "M_promise_date_3",
            '[(메모3)약속시분]'                 => "M_promise_time_3",
            '[(메모3)약속금액]'                 => "M_promise_money_3",
            '[(메모3)내용]'                     => "M_memo_3",
            '[(메모3)작업자]'                   => "M_save_id_nm_3",
            


        ];

        $_LAW = DB::TABLE("LOAN_INFO_LAW LIL")->SELECT("LIL.LAW_TYPE", "LIL.COURT_CD", "LIL.EVENT_YEAR", "LIL.EVENT_NO")->WHERE("LIL.LOAN_INFO_NO", $loan_info_no)->WHERE("LIL.SAVE_STATUS", "Y")->ORDERBY("LIL.SAVE_TIME", "DESC")->FIRST();

        if(!empty($_LAW) )
        {
            $arrayLawType = Vars::$arrayLawType;

            $law_type_nm = "";
            $court_cd_nm = "";
            if( !empty($_LAW->law_type) )
            {
                $law_type_nm = Func::nvl($arrayLawType[substr($_LAW->law_type,0,1)][$_LAW->law_type], $_LAW->law_type);
            }

            $court_cd_nm = Func::nvl( $configArr['court_cd'][$_LAW->court_cd], $_LAW->court_cd );
            $event_year  = $_LAW->event_year;
            $event_no    = $_LAW->event_no;
        }
        
        $_SANGGAK = DB::TABLE("LOAN_SANGGAK LS")->SELECT("LS.SANGGAK_BALANCE", "LS.SANGGAK_INTEREST_SUM", "LS.SANGGAK_DATE")->WHERE("LS.LOAN_INFO_NO", $loan_info_no)->WHERE("LS.SANGGAK_STATUS", "Y")->FIRST();

        if(!empty($_SANGGAK))
        {
            $sanggak_date = "";

            $sanggak_date  = Func::dateFormat($_SANGGAK->sanggak_date);
            $sanggak_money = $_SANGGAK->sanggak_balance + $_SANGGAK->sanggak_interest_sum;
        }

        $cust = DB::TABLE("LOAN_INFO")->SELECT("CUST_INFO_NO")->WHERE("NO", $loan_info_no)->FIRST();

        $_MEMO = DB::TABLE("CUST_INFO_MEMO CIM")->SELECT("SAVE_TIME", "DIV", "RELATION_CD", "PH_CD", "PROMISE_DATE", "PROMISE_HOUR", "PROMISE_MIN", "PROMISE_MONEY", "MEMO", "SAVE_ID")
                        ->WHERE("SAVE_STATUS", "Y")
                        ->WHERE("CUST_INFO_NO", $cust->cust_info_no)
                        ->ORDERBY("NO", "DESC")->LIMIT(3)->GET();

        if( !empty($_MEMO) )
        {
            foreach( $_MEMO as $idx => $M )
            {
                if( $idx == 0 )
                {
                    $M_save_time_date_1 = date("Y-m-d", strtotime($M->save_time));
                    $M_div_nm_1         = Func::nvl( $configArr['memo_div'][$M->div], $M->div );
                    $M_relation_cd_nm_1 = Func::nvl( $configArr['relation_cd'][$M->relation_cd], $M->relation_cd );
                    $M_ph_cd_nm_1       = Func::nvl( $configArr['phone_cd'][$M->ph_cd], $M->ph_cd );
                    $M_promise_date_1   = (!empty($M->promise_date)?Func::dateFormat($M->promise_date):"");
                    $M_promise_time_1   = (!empty($M->promise_hour)? $M->promise_hour : "") . (!empty($M->promise_min)? ":".$M->promise_min : "");
                    $M_promise_money_1  = $M->promise_money;
                    $M_memo_1           = $M->memo;
                    $M_save_id_nm_1     = isset($M->save_id) ? (!empty($userArr[$M->save_id]->name) ? $userArr[$M->save_id]->name : $M->save_id) : '';
                }
                elseif( $idx == 1 )
                {
                    $M_save_time_date_2 = date("Y-m-d", strtotime($M->save_time));
                    $M_div_nm_2         = Func::nvl( $configArr['memo_div'][$M->div], $M->div );
                    $M_relation_cd_nm_2 = Func::nvl( $configArr['relation_cd'][$M->relation_cd], $M->relation_cd );
                    $M_ph_cd_nm_2       = Func::nvl( $configArr['phone_cd'][$M->ph_cd], $M->ph_cd );
                    $M_promise_date_1   = (!empty($M->promise_date)?Func::dateFormat($M->promise_date):"");
                    $M_promise_time_1   = (!empty($M->promise_hour)? $M->promise_hour : "") . (!empty($M->promise_min)? ":".$M->promise_min : "");
                    $M_promise_money_2  = $M->promise_money;
                    $M_memo_2           = $M->memo;
                    $M_save_id_nm_2     = isset($M->save_id) ? (!empty($userArr[$M->save_id]->name) ? $userArr[$M->save_id]->name : $M->save_id) : '';
                }
                elseif( $idx == 2 )
                {
                    $M_save_time_date_3 = date("Y-m-d", strtotime($M->save_time));
                    $M_div_nm_3         = Func::nvl( $configArr['memo_div'][$M->div], $M->div );
                    $M_relation_cd_nm_3 = Func::nvl( $configArr['relation_cd'][$M->relation_cd], $M->relation_cd );
                    $M_ph_cd_nm_3       = Func::nvl( $configArr['phone_cd'][$M->ph_cd], $M->ph_cd );
                    $M_promise_date_1   = (!empty($M->promise_date)?Func::dateFormat($M->promise_date):"");
                    $M_promise_time_1   = (!empty($M->promise_hour)? $M->promise_hour : "") . (!empty($M->promise_min)? ":".$M->promise_min : "");
                    $M_promise_money_3  = $M->promise_money;
                    $M_memo_3           = $M->memo;
                    $M_save_id_nm_3     = isset($M->save_id) ? (!empty($userArr[$M->save_id]->name) ? $userArr[$M->save_id]->name : $M->save_id) : '';
                }
            }
        }

        $_LAW_I = DB::TABLE("LOAN_INFO_LAW LIL")->SELECT("LIL.SAVE_TIME", "LIL.LAW_TYPE", "LIL.COURT_CD", "LIL.LAW_CONFIRM_DATE", "LIL.LAW_APP_DATE", "LIL.EVENT_NO", "LIL.LAW_WON_MNY")
                        ->WHERE("LIL.SAVE_STATUS", "Y")
                        ->WHERE("LIL.LOAN_INFO_NO", $loan_info_no)
                        ->WHERE("LIL.LAW_TYPE", "LIKE", "I%")
                        ->ORDERBY("LIL.NO", "DESC")->LIMIT(3)->GET();

        if( !empty($_LAW_I) )
        {
            foreach( $_LAW_I as $idx => $I )
            {
                if( $idx == 0 )
                {
                    $I_save_time_date_1   = date("Y-m-d", strtotime($I->save_time));
                    $I_law_type_nm_1      = Func::nvl($arrayLawType[substr($I->law_type,0,1)][$I->law_type], $I->law_type);
                    $I_loan_info_no_1     = $loan_info_no;
                    $I_court_cd_nm_1      = Func::nvl( $configArr['court_cd'][$I->court_cd], $I->court_cd );
                    $I_law_confirm_date_1 = Func::dateFormat($I->law_confirm_date);
                    $I_law_app_date_1     = Func::dateFormat($I->law_app_date);
                    $I_event_no_1         = $I->event_no;
                    $I_law_won_mny_1      = $I->law_won_mny;
                }
                elseif( $idx == 1 )
                {
                    $I_save_time_date_2   = date("Y-m-d", strtotime($I->save_time));
                    $I_law_type_nm_2      = Func::nvl($arrayLawType[substr($I->law_type,0,1)][$I->law_type], $I->law_type);
                    $I_loan_info_no_2     = $loan_info_no;
                    $I_court_cd_nm_2      = Func::nvl( $configArr['court_cd'][$I->court_cd], $I->court_cd );
                    $I_law_confirm_date_2 = Func::dateFormat($I->law_confirm_date);
                    $I_law_app_date_2     = Func::dateFormat($I->law_app_date);
                    $I_event_no_2         = $I->event_no;
                    $I_law_won_mny_2      = $I->law_won_mny;
                }
                elseif( $idx == 2 )
                {
                    $I_save_time_date_3   = date("Y-m-d", strtotime($I->save_time));
                    $I_law_type_nm_3      = Func::nvl($arrayLawType[substr($I->law_type,0,1)][$I->law_type], $I->law_type);
                    $I_loan_info_no_3     = $loan_info_no;
                    $I_court_cd_nm_3      = Func::nvl( $configArr['court_cd'][$I->court_cd], $I->court_cd );
                    $I_law_confirm_date_3 = Func::dateFormat($I->law_confirm_date);
                    $I_law_app_date_3     = Func::dateFormat($I->law_app_date);
                    $I_event_no_3         = $I->event_no;
                    $I_law_won_mny_3      = $I->law_won_mny;
                }
            }
        }

        $_LAW_A = DB::TABLE("LOAN_INFO_LAW LIL")->SELECT("LIL.SAVE_TIME", "LIL.LAW_TYPE", "LIL.COURT_CD", "LIL.LAW_CONFIRM_DATE", "LIL.LAW_APP_DATE", "LIL.EVENT_NO", "LIL.LAW_WON_MNY")
                        ->WHERE("LIL.SAVE_STATUS", "Y")
                        ->WHERE("LIL.LOAN_INFO_NO", $loan_info_no)
                        ->WHERE("LIL.LAW_TYPE", "NOT LIKE", "I%")
                        ->ORDERBY("LIL.NO", "DESC")->LIMIT(3)->GET();

        if( !empty($_LAW_A) )
        {
            foreach( $_LAW_A as $idx => $A )
            {
                if( $idx == 0 )
                {
                    $A_save_time_date_1   = date("Y-m-d", strtotime($A->save_time));
                    $A_law_type_nm_1      = Func::nvl($arrayLawType[substr($A->law_type,0,1)][$A->law_type], $A->law_type);
                    $A_loan_info_no_1     = $loan_info_no;
                    $A_court_cd_nm_1      = Func::nvl( $configArr['court_cd'][$A->court_cd], $A->court_cd );
                    $A_law_confirm_date_1 = Func::dateFormat($A->law_confirm_date);
                    $A_law_app_date_1     = Func::dateFormat($A->law_app_date);
                    $A_event_no_1         = $A->event_no;
                    $A_law_won_mny_1      = $A->law_won_mny;
                }
                elseif( $idx == 1 )
                {
                    $A_save_time_date_2   = date("Y-m-d", strtotime($A->save_time));
                    $A_law_type_nm_2      = Func::nvl($arrayLawType[substr($A->law_type,0,1)][$A->law_type], $A->law_type);
                    $A_loan_info_no_2     = $loan_info_no;
                    $A_court_cd_nm_2      = Func::nvl( $configArr['court_cd'][$A->court_cd], $A->court_cd );
                    $A_law_confirm_date_2 = Func::dateFormat($A->law_confirm_date);
                    $A_law_app_date_2     = Func::dateFormat($A->law_app_date);
                    $A_event_no_2         = $A->event_no;
                    $A_law_won_mny_2      = $A->law_won_mny;
                }
                elseif( $idx == 2 )
                {
                    $A_save_time_date_3   = date("Y-m-d", strtotime($A->save_time));
                    $A_law_type_nm_3      = Func::nvl($arrayLawType[substr($A->law_type,0,1)][$A->law_type], $A->law_type);
                    $A_loan_info_no_3     = $loan_info_no;
                    $A_court_cd_nm_3      = Func::nvl( $configArr['court_cd'][$A->court_cd], $A->court_cd );
                    $A_law_confirm_date_3 = Func::dateFormat($A->law_confirm_date);
                    $A_law_app_date_3     = Func::dateFormat($A->law_app_date);
                    $A_event_no_3         = $A->event_no;
                    $A_law_won_mny_3      = $A->law_won_mny;
                }
            }
        }

        foreach( $array_parse_string as $key => $value )
        {
            $value2 = Func::nvl( ${$value}, '' );
        
            foreach( $dataArray as $k => $val )
            {
                $dataArray[$k] = str_replace($key, $value2, $val);
            }
        }

        return $dataArray;
    }
}